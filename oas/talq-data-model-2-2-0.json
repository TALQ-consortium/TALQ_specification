{
  "openapi": "3.0.1",
  "info": {
    "description": "This is a description of TALQ Data Models used by Gateway and CMS RESTful APIs.",
    "version": "2.2.0",
    "title": "TALQ Smart City Data Models",
    "contact": {
      "name": "TALQ Consortium",
      "email": "info@talq-consortium.org",
      "url": "http://talq-consortium.org"
    },
    "license": {
      "name": "TALQ RESTFul API 2.0 Licence",
      "url": "http://talq-consortium.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [
    {
      "name": "devices",
      "description": "Access to devices"
    }
  ],
  "paths": {},
  "externalDocs": {
    "description": "Find out more about TALQ Consortium",
    "url": "http://talq-consortium.org"
  },
  "components": {
    "schemas": {
      "TALQErrorMessage": {
        "type": "object",
        "description": "TALQ Error Message",
        "required": [
          "key"
        ],
        "properties": {
          "key": {
            "description": "The TALQ Error Message key. These values are the recommended keys which should be used in the current version and will be the only accepted in the next MAJOR release: *headerMissing*: An expected header is missing at the request. Ex: `talq-api-version` header missing.; *headerValueNotValid*: A received header has a not valid value. Ex: `talq-api-version` header value (2.1.0) is not the expected (2.2.0).; *parameterMissing*: An expected parameter is missing at the request. Ex: `clientAddress` is missing.; *parameterValueNotValid*: The received parameter has a not valid value. Ex: The `clientAddress` is not valid.; *payloadError*: The payload has some error as it is not as defined in the TALQ Specification.  Ex: The device payload without `deviceAddress` is not as defined by the OAS DM file (`deviceAddress` is a required attribute).; *resourceNotFound*: The referred resource by the request is not found.; *resourceConflict*: The request could not be completed due to a conflict with the current state of the target resource. Ex: A PUT request over a device with a function not included in its device class is erroneously sent.; *relatedResourceNotFound*: A resource related to an entity's attribute is not found. Ex: A `LampActuatorFunction.calendarID` is sent for a missing Calendar.; *deletingResourceIsReferred*: This error happens when a DELETE request tries to delete a resource that is referred by other entity. Ex: A DELETE request for a given calendar fails because this calendar is used by some LampActuators.; *serviceConstraintExceeded*: The service constraint has been surpassed. Ex: More calendars than the allowed by the `'maximumCalendars'` ControlService constraint has been created by the request.; *assignmentEntityNotValid*: The entity assigned to the referred resource is not valid. Ex: An assign command tries to assign a LampType, with `DALI` control type, to a given LampActuator, but the actual hardware is `1-10V` controlled.; *assignmentAddressNotValid*: The referred resource does not have any function appropriate to the assigned entity. Ex: An assign command tries to assign a calendar to a device without actuator functions.; *overrideCommandNotValid*: The command sent to the referred resource is not valid. Ex: An override command sends a command with a level state impossible to apply to the referred actuator function (level=77% when the actual lamp does not have this precision).; *overrideAddressNotValid*: The referred resource does not have any function appropriate to the override command. Ex: An override command tries to send a command to a device without actuator functions.",
            "type": "string"
          },
          "description": {
            "description": "The error description. String can refer to source addresses from the set below using {<tag>}.",
            "type": "string"
          },
          "references": {
            "description": "The references of the resources that are causing the error. They can be used at the description of the error.",
            "type": "array",
            "items":{
              "type":"object",
              "required":[
                "address"
              ],
              "properties":{
                "address":{
                  "description": "The reference of the resource.",   
                  "$ref": "#/components/schemas/ResourceReference"
                },
                "tag":{
                  "description": "Identifying tag of the resource.",   
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "Service": {
        "type": "object",
        "description": "A Service describes a set of functionalities which a CMS or Gateway may support. The Service model is the base parent model from which a number of specific child models inherit.",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "Name of the TALQ service",
            "type": "string",
            "enum": [
              "ConfigurationService",
              "ControlService",
              "DataCollectService",
              "GroupManagementService",
              "DataPackageService"
            ]
          },
          "events": {
            "description": "The list of service specific event.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventDesc"
            }
          }
        },
        "discriminator": {
          "propertyName": "name"
        }
      },
      "ConfigurationService": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Service"
          },
          {
            "type": "object",
            "description": "The TALQ Configuration service provides the mechanisms to configure the ODN and its interface to the CMS.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "M"
                }
              }
            ],
            "properties": {
              "name": {
                "type": "string",
                "default": "ConfigurationService"
              },
              "commissioningSupported": {
                "description": "This ODN can support commissioning from the CMS side.",
                "type": "boolean",
                "default": true
              },
              "devicesPaginationSupported": {
                "description": "This ODN can support pagination of devices.",
                "type": "boolean",
                "default": false
              },
              "supportedProfiles":{
                "description": "List of profiles supported by the Gateway. A profile specifies which TALQ functionality is mandatory or optional for the given application, and is present for each function and attribute definition. The current indication of mandatory or optional for TALQ features is being adopted as a Lighting Profile.",
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "lighting"
                  ]
                }
              }
            }
          }
        ]
      },
      "ControlService": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Service"
          },
          {
            "type": "object",
            "description": "The TALQ Control Service describes the mechanisms to control devices on the ODN in order to enable schedule and override based control.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "M"
                }
              }
            ],
            "properties": {
              "name": {
                "default": "ControlService",
                "type": "string"
              },
              "supportedTypes": {
                "description": "Control Program and calendar options supported.",
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "AbsoluteActivePeriod",
                    "AstroClockActivePeriod",
                    "AstroClockTimeControl",
                    "AstroAndSensorActivePeriod",
                    "DynamicControl",
                    "SensorActivePeriod",
                    "ExternalControlEffect",
                    "FixedControlEffect",
                    "ccDate",
                    "ccDay"
                  ]
                }
              },
              "maximumCalendars": {
                "description": "Maximum number of calendars supported.",
                "type": "integer"
              },
              "maximumPrograms": {
                "description": "Maximum number of control programs supported.",
                "type": "integer"
              },
              "maxProgramsPerCalendar": {
                "description": "Maximum number of control programs per calendar.",
                "type": "integer"
              },
              "maxSwitchPointsPerProgram": {
                "description": "Maximum number of switching points per control program. A switching point is a point in time where a new command within the control program is applied (excluding dynamic control).",
                "type": "integer"
              },
              "maxActivePeriodsPerProgram": {
                "description": "Maximum number of active periods per Control Program",
                "type": "integer"
              },
              "dayOffset": {
                "description": "Defines the start of day. Either 0 (midnight to midnight) or 12 (noon to noon). Default value is 0.",
                "type": "integer"
              },
              "ccDateSupport": {
                "description": "Indicates the ccDate options supported. 'full': Completely supported; 'dayOfMonthOnly': Support for day of every month, but no support for day of specific month. 'dayOfYearOnly': Support for day of every year.",
                "type": "string",
                "enum": [
                  "full",
                  "dayOfMonthOnly",
                  "dayOfYearOnly"
                ]
              },
              "ccDaySupport": {
                "description": "Indicates the ccDay options supported. 'full': Completely supported; 'noOccurrences': Support for day of every week. No support for nth week of month (first, second, ..., last).",
                "type": "string",
                "enum": [
                  "full",
                  "noOccurrences"
                ]
              },
              "programSecondsSupported": {
                "description": "Indicates whether the field of seconds is supported in programs. Ex: When programSecondsSupported=false a command at 10:30:15 will be executed without seconds taken into account, that is at 10:30:00.",
                "type": "boolean",
                "default": true
              }              
            }
          }
        ]
      },
      "DataCollectService": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Service"
          },
          {
            "type": "object",
            "description": "The TALQ Data Collection Service allows the configuration of when, and under what conditions, ODN data such as measurements or status information is reported to the CMS. This service shall be supported by CMS and Gateway.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "M"
                }
              }
            ],
            "properties": {
              "name": {
                "type": "string",
                "default": "DataCollectService"
              },
              "maximumDataLogs": {
                "description": "Maximum number of data loggers supported.",
                "type": "integer"
              },
              "supportedModes": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "VendorRecordingMode",
                    "EventRecordingMode",
                    "PeriodicRecordingMode",
                    "ImmediateReportingMode",
                    "ScheduledReportingMode"
                  ]
                }
              },
              "samplingAccuracy": {
                "description": "Maximum deviation of sampling moment in seconds.",
                "type": "number",
                "format": "float"
              },
              "minCollectionTime": {
                "description": "Base time (in seconds) between sampling and being able to report attributes specified in a data logger.",
                "type": "integer"
              },
              "minCollectionTimePerAttribute": {
                "description": "Additional time per attribute instance between sampling and being able to report the attribute in seconds.",
                "type": "number",
                "format": "float"
              },
              "loggableAttributes": {
                "description": "List of descriptions of the attributes within device classes that can be logged using periodic recording. If not specified, it is assumed that all attributes in a given device class can be logged.",
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "class"
                  ],
                  "properties": {
                    "class": {
                      "description": "Name of a device class.",
                      "type": "string"
                    },
                    "functions": {
                      "description": "List of functions and attributes within the device class to be logged. This list can contain functionId and functionType.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "functionId": {
                            "type": "string",
                            "description": "Identifier of the function."
                          },
                          "functionType": {
                            "type": "string",
                            "description": "Type of the function. Either a functionId or functionType shall be included. If a functionType is used, the description shall apply to all functions of that type."
                          },
                          "attributes": {
                            "description": "List of attribute names to be logged within the given function of the device class.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "samplingPeriodSupported": {
                "description": "Indicates whether the ODN supports periodic sampling for a data logger in periodic recording mode.",
                "type": "boolean"
              }
            }
          }
        ]
      },
      "GroupManagementService": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Service"
          },
          {
            "type": "object",
            "description": "The TALQ Group Management service provides the mechanisms to define and manage groups. Groups can be used across TALQ services, whenever there is a need to address a set of devices and/or function together.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "O"
                }
              }
            ],
            "properties": {
              "name": {
                "type": "string",
                "default": "GroupManagementService"
              },
              "maximumNumberOfGroups": {
                "description": "Maximum number of groups per Gateway.",
                "type": "integer"
              },
              "maximumGroupSize": {
                "description": "Maximum number of group members per group.",
                "type": "integer"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "DataPackageService": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Service"
          },
          {
            "type": "object",
            "description": "The TALQ Data Package service provides a mechanism to transfer data packages containing information (which may be ODN vendor specific) to the Gateway via the CMS. The CMS uses this service to transparently forward the data to the Gateway.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "properties": {
              "name": {
                "type": "string",
                "default": "DataPackageService"
              }
            }
          }
        ]
      },
      "Location": {
        "type": "object",
        "description": "The geographical position of the physical device.",
        "required": [
          "latitude",
          "longitude"
        ],
        "properties": {
          "latitude": {
            "description": "WGS84 latitude of GPS coordinate.",
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "description": "WGS84 longitude of GPS coordinate.",
            "type": "number",
            "format": "double"
          },
          "altitude": {
            "description": "Meter above sea level.",
            "type": "number",
            "format": "double"
          }
        }
      },
      "Orientation": {
        "type": "object",
        "description": "This dictionary contains the 3 Euler angles in degrees (Phi, Theta, Psi) or (Alpha, Beta, Gamma).",
        "required": [
          "phi",
          "theta",
          "psi"
        ],
        "properties": {
          "phi": {
            "description": "Phi Euler angle, or Alpha, in degrees.",
            "type": "number",
            "format": "double"
          },
          "theta": {
            "description": "Theta Euler angle, or Beta, in degrees.",
            "type": "number",
            "format": "double"
          },
          "psi": {
            "description": "Psi Euler angle, or Gamma, in degrees.",
            "type": "number",
            "format": "double"
          }
        }
      },
      "Attribute": {
        "type": "object",
        "description": "An attribute is a data element in a device on an ODN which can be read from or written to. Attributes relate to Functions",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "description": "The attribute type. This property is used as discriminator for all the descendent classes and aiding in serialization, deserialization, and validation.",
            "type": "string"
          },
          
          "timestamp": {
            "description": "If the timestamp is present it must follow the definition based on the attribute scope. Thus if is a measurement: time of measurement by the physical device; if it is configuration: time of change of the value (when it was set by the owner, in this case the CMS); if is operational: time of change (f.i: when it was set by the override command or a control program); if is event: time when the event is originated or detected (f.i: when the event arose). As defined by OAS3, all options of date-time - RFC3339 shall be supported",
            "type": "string",
            "format": "date-time"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "AttributeString": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Attribute"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "default": "AttributeString",
                "type": "string"
              },
              "value": {
                "description": "The current string value of attribute.",
                "type": "string"
              }
            }
          }
        ]
      },
      "AttributeStringArray": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Attribute"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "default": "AttributeStringArray",
                "type": "string"
              },
              "value": {
                "description": "The current string array value of attribute.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "AttributeUri": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Attribute"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "default": "AttributeUri",
                "type": "string"
              },
              "value": {
                "description": "The current uri value of attribute.",
                "type": "string",
                "format": "uri"
              }
            }
          }
        ]
      },
      "AttributeBinary": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Attribute"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "default": "AttributeBinary",
                "type": "string"
              },
              "value": {
                "description": "The current binary value of attribute.",
                "type": "string",
                "enum": [
                  "ON",
                  "OFF"
                ]
              }
            }
          }
        ]
      },
      "AttributeFactorSense": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Attribute"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "default": "AttributeFactorSense",
                "type": "string"
              },
              "value": {
                "description": "The current factor sense value of attribute.",
                "type": "string",
                "enum": [
                  "lead",
                  "lag"
                ]
              }
            }
          }
        ]
      },
      "AttributePowerSource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Attribute"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "default": "AttributePowerSource",
                "type": "string"
              },
              "value": {
                "description": "The current power source value of attribute.",
                "type": "string",
                "enum": [
                  "Mains",
                  "Battery",
                  "Other"
                ]
              }
            }
          }
        ]
      },
      "AttributeBoolean": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Attribute"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "default": "AttributeBoolean",
                "type": "string"
              },
              "value": {
                "description": "The current boolean value of attribute.",
                "type": "boolean"
              }
            }
          }
        ]
      },
      "AttributeInteger": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Attribute"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "default": "AttributeInteger",
                "type": "string"
              },
              "value": {
                "description": "The current integer value of attribute.",
                "type": "integer"
              }
            }
          }
        ]
      },
      "AttributePercent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Attribute"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "default": "AttributePercent",
                "type": "string"
              },
              "value": {
                "description": "The current percent value of attribute.",
                "type": "integer",
                "minimum": 0,
                "maximum": 100
              }
            }
          }
        ]
      },
      "AttributeFloat": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Attribute"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "default": "AttributeFloat",
                "type": "string"
              },
              "value": {
                "description": "The current float value of attribute.",
                "type": "number",
                "format": "float"
              }
            }
          }
        ]
      },
      "AttributeDateTime": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Attribute"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "default": "AttributeDateTime",
                "type": "string"
              },
              "value": {
                "description": "The current date-time value of attribute. As defined by OAS3, all options of date-time - RFC3339 shall be supported.",
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "AttributeLocation": {
        "description": "The current location value of attribute.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Attribute"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "default": "AttributeLocation",
                "type": "string"
              },
              "value": {
                "description": "The current location value of attribute.",
                "$ref": "#/components/schemas/Location"
              }
            }
          }
        ]
      },
      "AttributeCommand": {
        "description": "The current command value of attribute.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Attribute"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "default": "AttributeCommand",
                "type": "string"
              },
              "value": {
                "description": "The current command value of attribute.",
                "$ref": "#/components/schemas/Command"
              }
            }
          }
        ]
      },
      "AttributeState": {
        "description": "The current state value of attribute.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Attribute"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "default": "AttributeState",
                "type": "string"
              },
              "value": {
                "description": "The current state value of attribute.",
                "$ref": "#/components/schemas/State"
              }
            }
          }
        ]
      },
      "AttributeIntegerState": {
        "description": "The current integer state value of attribute.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AttributeState"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "default": "AttributeIntegerState",
                "type": "string"
              },
              "value": {
                "description": "The current integer state value of attribute.",
                "$ref": "#/components/schemas/IntegerState"
              }
            }
          }
        ]
      },
      "AttributeFloatState": {
        "description": "The current float state value of attribute.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AttributeState"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "default": "AttributeFloatState",
                "type": "string"
              },
              "value": {
                "description": "The current float state value of attribute.",
                "$ref": "#/components/schemas/FloatState"
              }
            }
          }
        ]
      },
      "AttributeBooleanState": {
        "description": "The current boolean state value of attribute.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AttributeState"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "default": "AttributeBooleanState",
                "type": "string"
              },
              "value": {
                "description": "The current boolean state value of attribute.",
                "$ref": "#/components/schemas/BooleanState"
              }
            }
          }
        ]
      },
      "AttributeTextState": {
        "description": "The current text state value of attribute.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AttributeState"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "default": "AttributeTextState",
                "type": "string"
              },
              "value": {
                "description": "The current text state value of attribute.",
                "$ref": "#/components/schemas/TextState"
              }
            }
          }
        ]
      },
      "AttributeRGBState": {
        "description": "The current RGB state value of attribute.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AttributeState"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "default": "AttributeRGBState",
                "type": "string"
              },
              "value": {
                "description": "The current RGB state value of attribute.",
                "$ref": "#/components/schemas/RGBState"
              }
            }
          }
        ]
      },
      "AttributeLevelState": {
        "description": "The current level state value of attribute.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AttributeState"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "default": "AttributeLevelState",
                "type": "string"
              },
              "value": {
                "description": "The current level state value of attribute.",
                "$ref": "#/components/schemas/LevelState"
              }
            }
          }
        ]
      },
      "AttributeSupplyType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Attribute"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "default": "AttributeSupplyType",
                "type": "string"
              },
              "value": {
                "description": "The current supply type value of attribute.",
                "type": "string",
                "enum": [
                  "AC",
                  "DC"
                ]
              }
            }
          }
        ]
      },
      "AttributeFloatKVPArray": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Attribute"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "default": "AttributeFloatKVPArray",
                "type": "string"
              },
              "value": {
                "description": "The current string array value of attribute. A KVP (Key-Value Pair) is a pair of values with a given relationship, in this case both are floats.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties":{
                    "key":{
                      "type": "number",
                      "format": "float",
                      "description": "The key of the pair."
                    },
                    "value":{
                      "type": "number",
                      "format": "float",
                      "description": "The value of the pair."
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "AttributeRoadUser": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Attribute"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "default": "AttributeRoadUser",
                "type": "string"
              },
              "value": {
                "description": "Type of road user.",
                "type": "string",
                "enum": [
                  "Pedestrian", 
                  "Bicycle", 
                  "Motorcycle", 
                  "Car", 
                  "Truck", 
                  "Diesel vehicle", 
                  "Petrol vehicle", 
                  "Electric vehicle", 
                  "Scooter", 
                  "Others"
                ]
              }
            }
          }
        ]
      },
      "AttributeOrientation": {
        "description": "The current orientation value of attribute.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Attribute"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "default": "AttributeOrientation",
                "type": "string"
              },
              "value": {
                "description": "The current orientation value of attribute.",
                "$ref": "#/components/schemas/Orientation"
              }
            }
          }
        ]
      },
      "Function": {
        "description": "A function is a instance of function type for a device. A function belongs to a specific Device. The function model is the mechanism used to model fundamental ODN functionality.",
        "type": "object",
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "id": {
            "description": "The unique identifier of the function inside a device or a device class.  Matches the 'functionId' field of the FunctionDesc within the DeviceClass declared for the device containing this function.",
            "type": "string"
          },
          "type": {
            "description": "Reference to the function type. This attribute can be used to announce vendor specific extensions for the device.",
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Device": {
        "description": "A Device is an instance of a device class and represents a physical device on an ODN.",
        "type": "object",
        "required": [
          "address",
          "name",
          "class"
        ],
        "properties": {
          "address": {
            "description": "The TALQ address of device.",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "The name of device.",
            "type": "string"
          },
          "class": {
            "description": "The device class name.",
            "type": "string"
          },
          "functions": {
            "description": "The individual function models containing the data relating to this device. Each individual function must have a corresponding FunctionDesc at the DeviceClass referred by the 'class' property.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Function"
            }
          }
        }
      },
      "CommandsDesc": {
        "description": "Applicable to an actuator functions to enable restriction of commands accepted.",
        "type": "object",
        "properties": {
          "scope": {
            "type": "string",
            "enum": [
              "default",
              "override",
              "programs"
            ],
            "default": "default"
          },
          "states":{
            "description": "Array of accepted States by the actuator.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/State"
            }
          },
          "levels": {
            "description": "Array of accepted ranges of levels accepted by the actuator.",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "start"
              ],
              "properties": {
                "start": {
                  "$ref": "#/components/schemas/DimLevel"
                },
                "end": {
                  "$ref": "#/components/schemas/DimLevel"
                }
              }
            }
          }
        }
      },
      "AttributeDesc": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "The attribute name.",
            "type": "string"
          },
          "description": {
            "description": "Description of vendor specific attributes.",
            "type": "string"
          },
          "minValue": {
            "description": "Minimum value for the attribute.",
            "type": "number"
          },
          "maxValue": {
            "description": "Maximum value for the attribute.",
            "type": "number"
          },
          "regEx": {
            "description": "Regular expression. Describes valid attribute values.",
            "type": "string"
          },
          "readOnly": {
            "description": "Read-only status of the attribute.",
            "type": "boolean"
          },
          "enumValues": {
            "description": "The list of possible values of the attribute if it is of AttributeString type (when value is constrained to be one of a set of possible values).",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "unit": {
            "description": "A string defining the unit type. Either one of the TALQ standard unit types, or specific based on an extension.",
            "type": "string",
            "enum": [
              "None",
              "Amperes",
              "Degree360",
              "DegreesCelcius",
              "Hertz",
              "Joules",
              "KiloWatt",
              "KiloWattHours",
              "MilliAmperes",
              "Percent",
              "Seconds",
              "VoltAmperes",
              "VoltPerSecond",
              "Volts",
              "Watt",
              "Meters",
              "Date",
              "DateTime",
              "dBm",
              "Hours",
              "VoltAmpereReactive",
              "KiloVoltAmpereReactive",
              "KiloVoltAmpereReactiveHours",
              "KiloVoltAmpereHours",
              "KiloVoltAmpere",
              "VoltAmpereHours",
              "Illuminance",
              "Time"
            ]
          },
          "commands": {
            "$ref": "#/components/schemas/CommandsDesc"
          }
        }
      },
      "VendorAttributeDesc": {
        "description": "Description of a vendor-defined attribute.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AttributeDesc"
          },
          {
            "type": "object",
            "description": "Vendor description of the attribute",
            "properties": {
              "scope": {
                "description": "Scope of vendor attribute desc",
                "type": "string",
                "enum": [
                  "configuration",
                  "measurement",
                  "event",
                  "operational"
                ]
              },
              "type": {
                "description": "Type of attribute.",
                "type": "string",
                "enum": [
                  "AttributeBinary",
                  "AttributeBoolean",
                  "AttributeBooleanState",
                  "AttributeCommand",
                  "AttributeDateTime",
                  "AttributeFactorSense",
                  "AttributeFloat",
                  "AttributeFloatState",
                  "AttributeInteger",
                  "AttributeIntegerState",
                  "AttributeLevelState",
                  "AttributeLocation",
                  "AttributePercent",
                  "AttributePowerSource",
                  "AttributeRGBState",
                  "AttributeState",
                  "AttributeString",
                  "AttributeStringArray",
                  "AttributeTextState",
                  "AttributeUri"
                ]
              }
            }
          }
        ]
      },
      "EventDesc": {
        "description": "Describes an event, enabling correct interpretation by the CMS.",
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "description": "Type of event",
            "allOf": [
              {
                "$ref": "#/components/schemas/EventType"
              }
            ]
          },
          "description": {
            "description": "Description of event.",
            "type": "string"
          }
        }
      },
      "FunctionDesc": {
        "description": "A function description identifies a specific set of attributes and events that describe a function, which may have multiple instantiations. (A Device Class is a collection of function descriptions, with some additional configuration.)",
        "type": "object",
        "required": [
          "functionId",
          "type"
        ],
        "properties": {
          "functionId": {
            "description": "The unique identifier of the FunctionDesc. The ‘id’ field of a Function described by this FunctionDesc will match this ‘functionId’ value. e.g. ‘BasicFunction02’.",
            "type": "string"
          },
          "type": {
            "description": "The TALQ function type (e.g. 'BasicFunction', 'LampActuatorFunction')",
            "type": "string"
          },
          "vendorAttributes": {
            "description": "The list of vendor attributes available in the function.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VendorAttributeDesc"
            }
          },
          "attributes": {
            "description": "The list of all attributes of the referred TALQ function that are available in this function. All attributes used by the end point shall be announced, whether they are optional or mandatory.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributeDesc"
            }
          },
          "events": {
            "description": "The list of events of the referred TALQ function that are available in this function.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventDesc"
            }
          }
        }
      },
      "DeviceClass": {
        "description": "A DeviceClass describes the capabilities of a device on the network. A DeviceClass can be used to avoid multiple definitions of very similar Devices.",
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "The device class name.",
            "type": "string"
          },
          "functions": {
            "description": "The list of function descriptions.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FunctionDesc"
            }
          }
        }
      },
      "BasicFunction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Function"
          },
          {
            "type": "object",
            "x-talq-mandatory-cms": "true",
            "x-talq-mandatory-gw": "false",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "O"
                }
              }
            ],
            "description": "The Basic function describes the properties related to the physical asset to which the logical device is associated, such as identification (assetId) and location information.",
            "properties": {
              "type": {
                "default": "BasicFunction",
                "type": "string"
              },
              "displayName": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeString"
                  },
                  {
                    "type": "object",
                    "description": "Display name of the asset.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "assetId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeString"
                  },
                  {
                    "type": "object",
                    "description": "Customer identifier of the asset. If multiple devices have the same assetId it means they belong to the same asset.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "serial": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeString"
                  },
                  {
                    "type": "object",
                    "description": "Serial number of the device.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "hwType": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeString"
                  },
                  {
                    "type": "object",
                    "description": "Hardware type of the device.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "hwVersion": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeString"
                  },
                  {
                    "type": "object",
                    "description": "Hardware revision of the device.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "swType": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeString"
                  },
                  {
                    "type": "object",
                    "description": "Software type of device. This attribute may be useful if the same hardware supports multiple firmware versions with different functions.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "swVersion": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeString"
                  },
                  {
                    "type": "object",
                    "description": "Software version installed on the device.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "installationDate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeDateTime"
                  },
                  {
                    "type": "object",
                    "description": "The installation date of Physical Device.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "location": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeLocation"
                  },
                  {
                    "type": "object",
                    "description": "Latitude, Longitude and Altitude.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "deviceReset": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "The physical device containing the logical device was reset.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "softwareUpdating": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates software updating is in progress.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "hardwareUpdating": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates that hardware associated with this logical device has been updated. [DEPRECATED: This attribute has been deprecated and it will be removed in the next MAJOR release. Please use the new hardwareUpdated instead.]",
                    "x-talq-deprecated-by": "2.2.0",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "hardwareUpdated": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates that hardware associated with this logical device has been updated.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "batteryMode": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Device operating in battery mode.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "installationMode": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Device is being installed.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "maintenanceMode": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Device is undergoing maintenance, where maintenance may include hardware or software related maintenance actions.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "cabinetDoorOpen": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Cabinet door is open.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "batteryShutdown": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the device has shut down due to battery discharge.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "locationUpdated": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the location of a device has changed, but detecting the change is outside the scope of the TALQ Specification.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "timeZone": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeString"
                  },
                  {
                    "type": "object",
                    "description": "Time zone of the device. Time zone may be expressed in two formats. <timezone> where <timezone> is a time zone as defined in the zone.tab of the IANA timezone database [IANA]; and stdoffset[dst[offset][,start[/time],en d[/time]]] as defined by the Open Group for posix systems [POSIX].",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "ntpServers": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeStringArray"
                  },
                  {
                    "type": "object",
                    "description": "List of NTP servers to use for time synchronization (Hostname or IP address).",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "ntpSynchPeriod": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeInteger"
                  },
                  {
                    "type": "object",
                    "description": "Number of hours between two time synchronization updates.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "currentTime": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeDateTime"
                  },
                  {
                    "type": "object",
                    "description": "Current time of the device defined as local time with time zone designator.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              }
            }
          }
        ]
      },
      "GatewayFunction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Function"
          },
          {
            "type": "object",
            "x-talq-mandatory-cms": "true",
            "x-talq-mandatory-gw": "true",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "M"
                }
              }
            ],
            "description": "The Gateway function includes the necessary attributes to enable the communication between the CMS and the Gateway according to the TALQ Specification.",
            "required": [
              "cmsUri",
              "cmsAddress",
              "gatewayUri",
              "gatewayAddress"
            ],
            "properties": {
              "type": {
                "default": "GatewayFunction",
                "type": "string"
              },
              "cmsUri": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeUri"
                  },
                  {
                    "type": "object",
                    "description": "Base URI for TALQ communication that allows the Gateway to access the CMS. Must be an absolute URI. Other URI's for accessing CMS can be relative to this base.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "cmsAddress": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeString"
                  },
                  {
                    "type": "object",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "gatewayUri": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeUri"
                  },
                  {
                    "type": "object",
                    "description": "Base URI for TALQ communication that allows the CMS to access the Gateway. Must be an absolute URI. Other URI's for accessing Gateway can be relative to this base.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "gatewayAddress": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeString"
                  },
                  {
                    "type": "object",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "retryPeriod": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Time duration before the Gateway retransmits a message for which expected response has not been received.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "crlUrn": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeUri"
                  },
                  {
                    "type": "object",
                    "description": "URI where the Gateway can obtain the Certification Revocation List (CRL).",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "vendor": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeString"
                  },
                  {
                    "type": "object",
                    "description": "Vendor identification.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "pkgUrl": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeUri"
                  },
                  {
                    "type": "object",
                    "description": "URL pointing at location packages can be downloaded. This is used in the data package service.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "currentReleaseId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeString"
                  },
                  {
                    "type": "object",
                    "description": "Release ID of currently deployed release. This is used in the data package service.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              }
            }
          }
        ]
      },
      "CommunicationFunction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Function"
          },
          {
            "type": "object",
            "x-talq-mandatory-cms": "true",
            "x-talq-mandatory-gw": "false",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "O"
                }
              }
            ],
            "description": "The Communication Function contains attributes related to the communication within the ODN, and between ODN devices and Gateways. Although communication within the ODN is outside the scope of the TALQ Smart City Protocol, this Function enables access to a minimum set of configuration and state information of the ODN communication interface in order to facilitate system management from the CMS.",
            "properties": {
              "type": {
                "default": "CommunicationFunction",
                "type": "string"
              },
              "communicationType": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeString"
                  },
                  {
                    "type": "object",
                    "description": "Type of communication technology implemented by the ODN (e.g. power line, wireless).",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "logicalAddress": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeString"
                  },
                  {
                    "type": "object",
                    "description": "Logical address for communication within the ODN scope (IP address, Short Address, ...).",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "altLogicalAddress": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeString"
                  },
                  {
                    "type": "object",
                    "description": "Additional logical address used for communication within the ODN, for instance, group communication address (not a TALQ group address).",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "physicalAddress": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeString"
                  },
                  {
                    "type": "object",
                    "description": "Physical address of the device. For example, IEEE MAC address. This attribute can be used to map between logical and physical devices. The format is specific to the ODN implementation.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "parentAddress": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeString"
                  },
                  {
                    "type": "object",
                    "description": "TALQ Address of the parent device, e.g. gateway. It shall point to a specific communication function.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "timeToLive": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeInteger"
                  },
                  {
                    "type": "object",
                    "description": "Number of times a packet can be forwarded within the ODN.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "repeatingEnabled": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Describes whether repeating functionality is enabled at the device.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "transmitPower": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Transmit power used by the device within the ODN.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "numberOfHops": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeInteger"
                  },
                  {
                    "type": "object",
                    "description": "Number of hops between the gateway and the ODN device represented by the device including this function.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "communicationQuality": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Indicator of the quality of the communication with the device. 100% means good quality.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "communicationFailure": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "This attribute is updated by the ODN when the communication function is not operating as expected.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              }
            }
          }
        ]
      },
      "AssignCommand": {
        "description": "An AssignCommand describes an entity, for example a calendar, and the function(s) to which it is assigned by the command. The reference can address a single function of a single device, a single device or a group. When the function is not explicitly referred to, all functions of the referenced device (or group) related to the entity assigned are changed.",
        "type": "object",
        "required": [
          "addresses",
          "entity"
        ],
        "properties": {
          "addresses": {
            "description": "References of device(s) or group(s) to which the entity shall be assigned.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceReference"
            }
          },
          "entity": {
            "description": "The reference of entity to be assigned.",
            "$ref": "#/components/schemas/ResourceReference",
            "nullable": true
          }
        }
      },
      "OverrideCommand": {
        "description": "An OverrideCommand contains a command to be applied to a number of devices on the ODN. If an override command is received when other is active, the last is used and the former is removed, if after that a new overrideCommand with no targetCommand is received then the actuator comes back to normal actuation (control program or defaultLightState).",
        "type": "object",
        "properties": {
          "addresses": {
            "description": "Address(es) of device(s) or group(s). These addresses must include the 'resources' part to inform the destination endpoint about the entity type, ex: /groups/{groupAddress} or /devices/{deviceAddress}. When using device addresses, the override command can be addressed to a specific function or attribute by adding its id or name, ex:/devices/{deviceAddress}/{functionId} or /devices/{deviceAddress}/{functionId}/{attributeName}. When no particular attribute is referred, the targetCommand affects to all the attributes contained in the functions of the device, or in the specific function referred, which have scope=operational, type=AttributeCommand, and the same State type as the targetCommand.state property.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceReference"
            }
          },
          "targetCommand": {
            "description": "The command to override, this command includes an optional start and expiration of the it. If the targetCommand is not included the CMS must stop the existing override command and return to the normal operation.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Command"
              }
            ]
          }
        }
      },
      "State": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "Name of state type",
            "type": "string",
            "enum": [
              "IntegerState",
              "FloatState",
              "BooleanState",
              "TextState",
              "RGBState",
              "LevelState"
            ]
          }
        },
        "discriminator": {
          "propertyName": "name"
        }
      },
      "IntegerState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/State"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "default": "IntegerState",
                "type": "string"
              },
              "value": {
                "type": "number",
                "format": "integer"
              }
            }
          }
        ]
      },
      "FloatState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/State"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "default": "FloatState",
                "type": "string"
              },
              "value": {
                "type": "number",
                "format": "float"
              }
            }
          }
        ]
      },
      "BooleanState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/State"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "default": "BooleanState",
                "type": "string"
              },
              "value": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "TextState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/State"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "default": "TextState",
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            }
          }
        ]
      },
      "RGBState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/State"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "default": "RGBState",
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            }
          }
        ]
      },
      "LevelState": {
        "allOf": [
          {
            "$ref": "#/components/schemas/State"
          },
          {
            "type": "object",
            "description": "",
            "properties": {
              "name": {
                "default": "LevelState",
                "type": "string"
              },
              "value": {
                "$ref": "#/components/schemas/DimLevel"
              }
            }
          }
        ]
      },
      "DimLevel": {
        "type": "integer",
        "minimum": 0,
        "maximum": 100
      },
      "CommandBase": {
        "description": "A basic control command.",
        "x-talq-profiles":[
          {
            "lighting": {
              "cms": "M",
              "gw": "M"
            }
          }
        ],
        "type": "object",
        "required": [
          "state"
        ],
        "properties": {
          "state": {
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "M"
                }
              }
            ],
            "$ref": "#/components/schemas/State"
          },
          "rampToLevelTime":{
            "description": "the time (in seconds) taken for the value to ramp to the specified level. The change will be finished rampToLevelTime seconds after: the scheduled time if the change comes from a control program; the reception of the request, or the command.start time attribute, if the change comes from an override command, or; the sensor event is raised if the control is sensor-based. If actions related to one command remain to be completed when a subsequent command is received, the subsequent command shall take precedence.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "O"
                }
              }
            ],
            "type": "number",
            "format": "float"
          },
          "rampFromLevelTime":{
            "description": "the time (in seconds) taken for the value to ramp to the specified level. The change will be finished rampFromLevelTime seconds after: the scheduled time if the change comes from a control program; the reception of the request if the change comes from an override command; expiry of the related command, or; the sensor event is lowered and the hold time subsequently expires if the control is sensor-based. If actions related to one command remain to be completed when a subsequent command is received, the subsequent command shall take precedence.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "O"
                }
              }
            ],
            "type": "number",
            "format": "float"
          }
        }
      },
      "Command": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommandBase"
          },
          {
            "type": "object",
            "description": "A command defines a type of control action that can be applied to a function. Commands can be generated by a manual override action or by a control program.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "M"
                }
              }
            ],
            "properties": {
              "reason": {
                "description": "Indicates the command was triggered by override, sensor or control program.",
                "x-talq-profiles":[
                  {
                    "lighting": {
                      "cms": "M",
                      "gw": "O"
                    }
                  }
                ],
                "type": "string",
                "enum": [
                  "default",
                  "override",
                  "sensor",
                  "program"
                ],
                "default": "default"
              },
              "cmsRefId": {
                "description": "CMS reference, which can be used for data logging.",
                "x-talq-profiles":[
                  {
                    "lighting": {
                      "cms": "M",
                      "gw": "M"
                    }
                  }
                ],
                "type": "string"
              },
              "refAddress": {
                "description": "Reference to the source of the command, i.e. a specific sensor or control program. Can be used in combination with the reason field to specify the source of the command.",
                "x-talq-profiles":[
                  {
                    "lighting": {
                      "cms": "M",
                      "gw": "O"
                    }
                  }
                ],
                "type": "string"
              },
              "start": {
                "description": "Time when the control action resulting from command shall start. This attribute is used only with override commands to set a time to start an override action.  If not specified, the override command starts immediately. As defined by OAS3, all options of date-time - RFC3339 shall be supported",
                "x-talq-profiles":[
                  {
                    "lighting": {
                      "cms": "M",
                      "gw": "O"
                    }
                  }
                ],
                "type": "string",
                "format": "date-time"
              },
              "expiration": {
                "description": "Time when the control action resulting from command shall be terminated. This attribute is used only with override commands to set a time to stop an override action.  After the expiration of an override command, the system should go back to the state defined by the active control program.  If not specified, there is no expiration for the override command. As defined by OAS3, all options of date-time - RFC3339 shall be supported",
                "x-talq-profiles":[
                  {
                    "lighting": {
                      "cms": "M",
                      "gw": "O"
                    }
                  }
                ],
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "GenericActuatorFunction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Function"
          },
          {
            "type": "object",
            "x-talq-mandatory-cms": "false",
            "x-talq-mandatory-gw": "false",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "description": "The Generic Actuator function includes attributes related to generic control and it represents the smallest unit for control purposes.",
            "properties": {
              "type": {
                "default": "GenericActuatorFunction",
                "type": "string"
              },
              "defaultState": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeState"
                  },
                  {
                    "type": "object",
                    "description": "Sets the default state output for the generic actuator. This shall be applicable if the actuator is not under any scheduled (calendarID) or override control (OverrideCommand).",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "actualState": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeState"
                  },
                  {
                    "type": "object",
                    "description": "This attribute should reflect the physical state of the source as much as possible. It may be calculated or measured, depending on the specific ODN implementation, which is outside the scope of this specification.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "targetCommand": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeCommand"
                  },
                  {
                    "type": "object",
                    "description": "Latest command for the generic actuator.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "operational"
                  }
                ]
              },
              "feedbackCommand": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeCommand"
                  },
                  {
                    "type": "object",
                    "description": "This attribute reflects the command in effect and it might deviate from the actualState due to propagation time or due to internal ODN specific mechanisms to handle the priority of the requests.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "stateChange": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "This attribute reflects that the state has changed",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "calendarID": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeString"
                  },
                  {
                    "type": "object",
                    "description": "TALQ Address of the calendar controlling this generic actuator. If this attribute is empty, the behavior shall be determined by the ODN. If the attribute is invalid, the ODN shall trigger a generic invalid address event and the behavior shall be determined by the ODN.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "operational"
                  }
                ]
              },
              "invalidCalendar": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "This attribute reflects that a calendar has been allocated and can not be implemented it.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "invalidProgram": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "This attribute reflects that a control program has been allocated and can not be implemented it",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "programChange": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "This attribute reflects that the control program applicable to the actuator has changed.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "calendarChange": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "This attribute reflects that the calendar applicable to the actuator has changed.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "targetCommandChange": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "This attribute reflects that the targetCommand has changed.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              }
            }
          }
        ]
      },
      "LampActuatorFunction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Function"
          },
          {
            "type": "object",
            "x-talq-mandatory-cms": "true",
            "x-talq-mandatory-gw": "false",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "O"
                }
              }
            ],
            "description": "The Lamp Actuator function includes attributes related to lighting control and it represents the smallest unit for control purposes. In practice, however, a Lamp Actuator function can control combinations of several lamps and control gear but all in the same way, as if they are all one individual unit.",
            "properties": {
              "type": {
                "default": "LampActuatorFunction",
                "type": "string"
              },
              "lampTypeId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeString"
                  },
                  {
                    "type": "object",
                    "description": "TALQ Address of an existing lampType.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "outputPort": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeString"
                  },
                  {
                    "type": "object",
                    "description": "Identifier of the output port that is controlled by the lamp actuator.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "standbyMode": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBinary"
                  },
                  {
                    "type": "object",
                    "description": "Defines the behavior of the lamp actuator when output level is set to zero. If OFF, light output level is zero with no power to the lamp control gear. If ON,  light output level is zero but power is delivered to the lamp control gear (standby mode).",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "cloEnabled": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Determines whether a Constant Light Output (CLO) correction factor is used. CLO is used to compensate for lumen output degradation over the life time of the lamp. If CLO is enabled, lamps are dimmed part of the lampType.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "defaultLightState": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeLevelState"
                  },
                  {
                    "type": "object",
                    "description": "Sets the default light output for the lamp actuator. This shall be applicable if the actuator is not under any scheduled (calendarID) or override control (OverrideCommand). This attribute shall be set to 100% as default value.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "targetLightCommand": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeCommand"
                  },
                  {
                    "type": "object",
                    "description": "Latest command for the lamp actuator.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "operational"
                  }
                ]
              },
              "feedbackLightCommand": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeCommand"
                  },
                  {
                    "type": "object",
                    "description": "This attribute reflects the command in effect and it might deviate from the actualLightState due to propagation time or due to internal ODN specific mechanisms to handle the priority of the requests.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "actualLightState": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeLevelState"
                  },
                  {
                    "type": "object",
                    "description": "This attribute should reflect the physical state of the light source as much as possible, including factors such as CLO. It may be calculated or measured, depending on the specific ODN  implementation, which is outside the scope of this specification.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "maintenanceFactorEnabled": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates whether maintenance compensation is enabled. A maintenance factor can be added in addition to the CLO correction factor to account effects of maintenance (e.g. cleaning) of the luminaire on the lumen output.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "maintenancePeriod": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeInteger"
                  },
                  {
                    "type": "object",
                    "description": "Period (Hours) after which maintenance factor is 100%. The assumption is that the maintenance correction factor vs. time  curve is linear.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "maintenanceFactor": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributePercent"
                  },
                  {
                    "type": "object",
                    "description": "Initial correction factor applied when the luminaire is cleaned.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "lastMaintenanceDate": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeDateTime"
                  },
                  {
                    "type": "object",
                    "description": "Date when the luminaire was last cleaned (used to reset the maintenance factor).",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "operational"
                  }
                ]
              },
              "calendarID": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeString"
                  },
                  {
                    "type": "object",
                    "description": "TALQ Address of the calendar controlling this lamp actuator. If this attribute is empty, the behavior shall be determined by the ODN. If the attribute is invalid, the ODN shall trigger a generic invalid address event and the behavior shall be determined by the ODN.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "operational"
                  }
                ]
              },
              "invalidCalendar": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "The lamp actuator function has been allocated a calendar that it cannot implement.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "invalidProgram": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "The lamp actuator function has been allocated a control program that it cannot implement.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "lightStateChange": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Light state has changed.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "targetLightCommandChange": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "The targetLightCommand operational attribute has changed.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "programChange": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "The control program applicable to the lamp actuator has changed (these are the points at which the calendar changes the program).",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "calendarChange": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "The calendar applicable to the lamp actuator has changed.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "invalidLampType": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates that the lamp type referred cannot be applied.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              }
            }
          }
        ]
      },
      "LampMonitorFunction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Function"
          },
          {
            "type": "object",
            "x-talq-mandatory-cms": "true",
            "x-talq-mandatory-gw": "false",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "O"
                }
              }
            ],
            "description": "The Lamp Monitor function enables monitoring of lamp parameters. A Lamp Monitor function should be associated with a specific lamp/control gear combination. Multiple lamp monitor functions may be implemented by a single device.",
            "properties": {
              "type": {
                "default": "LampMonitorFunction",
                "type": "string"
              },
              "supplyType": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeSupplyType"
                  },
                  {
                    "type": "object",
                    "description": "Supply type of the lamp. Accepted values are: AC, DC.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "lampTypeId": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeString"
                  },
                  {
                    "type": "object",
                    "description": "TALQ Address of an existing lamp type. If not set to a valid value, this shall be the lamp type used in the lamp actuator. If this attribute is not supported in the implementation, the lamp monitor shall use the lamp type specified in the corresponding lamp actuator.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "monitoringReference": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeString"
                  },
                  {
                    "type": "object",
                    "description": "Name of the entity (or physical device) being monitored by this function.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "numberOfLamps": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeInteger"
                  },
                  {
                    "type": "object",
                    "description": "Number of lamps being monitored by the lamp monitor function.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "switchOnCounter": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeInteger"
                  },
                  {
                    "type": "object",
                    "description": "Cumulative number of ON/OFF cycles since installation of the lamp. The wrap around value is 2e32 – 1.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "operatingHours": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Number of hours the lamp is on. This is the value used in CLO and may be set by the CMS.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "temperature": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Temperature of the device implementing this function.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "supplyVoltage": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "RMS supply volts when supplyType is AC, supply voltage (V) when supplyType is DC.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "supplyCurrent": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "RMS supply current (A) when supplyType is AC, supply current (A) when supplyType is DC.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "activePower": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Active power.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "reactivePower": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Reactive power.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "apparentPower": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Apparent Power.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "powerFactor": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Active power/Apparent power.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "powerFactorSense": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFactorSense"
                  },
                  {
                    "type": "object",
                    "description": "Phase sense of power factor.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "activeEnergy": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Cumulative active energy (since installation or counter reset).",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "supplyLossCount": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeInteger"
                  },
                  {
                    "type": "object",
                    "description": "Incrementing count of supply losses. The wrap around value is 2e32 – 1.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "lampPowerTooHigh": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Lamp power is greater than expected lamp power + lampPowerTolerance is 2e32 – 1.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "lampPowerTooLow": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Lamp power is smaller than expected lamp power  - lampPowerTolerance.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "lampVoltageTooHigh": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Level of lamp voltage (not supply voltage) is greater than highLampVoltageThreshold.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "lampVoltageTooLow": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Level of lamp voltage (not supply voltage) is smaller than lowLampVoltageThreshold.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "lampFailure": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "The lamp is not operating as it is supposed to (e.g. the lamp is broken). This event shall be used to detect a situation where the lamp (or LED module(s)) should be lit, but produce no light. This could be detected by the current flowing or power consumed.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "currentTooHigh": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Supply current is above the highCurrentThreshold defined in the lamp type.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "currentTooLow": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Supply current is below the lowCurrentThreshold defined in the lamp type.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "powerFactorTooLow": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "The power factor is below powerFactorThreshold.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "highTemperature": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates temperature is above the high threshold.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "relayFailure": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Set in case of internal relay is failing (e.g. it may be stuck  in either on or off position). Typically if contactor error isused as well.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "absolutLampPowerTooHigh": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the power is above the lampPowerHighThreshold in the lamp type.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "absolutLampPowerTooLow": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the power is below the lampPowerLowThreshold in the lamp type.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "controlGearCommFailure": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates failure of the control gear.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "cyclingFailure": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the lamp is constantly switching ON and OFF in an unexpected manner. This event shall be used to indicate a lamp which cycles while it should be on. The actual detection algorithm is outside the scope of this specification.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "supplyLoss": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates loss of supply (power)",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "contactorError": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicate error in contactor. For instance, if a contactor (relay) is used, the contactor may be stuck in either of the positions (on or off).",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "lampUnexpectedOn": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates lamp is unexpectedly on.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "leakageDetected": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates that an earth leakage fault has been detected.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "invalidLampType": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates that the lamp type referred cannot be applied.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              }
            }
          }
        ]
      },
      "ElectricalMeterFunction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Function"
          },
          {
            "type": "object",
            "x-talq-mandatory-cms": "true",
            "x-talq-mandatory-gw": "false",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "O"
                }
              }
            ],
            "description": "The electrical meter function supports electrical metering capabilities including measurements of voltage, current, power, energy, and power factor. This function may be associated with Luminaire Controllers, Cabinet Controllers or electrical meters installed in switch boxes. ODNs may implement both single phase and three phase meters. Typically meters within a control device will be single phase and stand-alone meters. A street side cabinet may have single phase or three phase meters.",
            "properties": {
              "type": {
                "default": "ElectricalMeterFunction",
                "type": "string"
              },
              "totalPowerHighThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Power above which the  totalPowerTooHigh event is triggered.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "totalPowerLowThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Power below which the  totalPowerTooLow event is triggered.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "powerfactorThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Power factor below which the powerfactorTooLow event is triggered.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "phase1PowerfactorLowThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Phase 1 power factor below which the phase1PowerfactorTooLow event is triggered.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "phase2PowerfactorLowThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Phase 2 power factor below which the phase2PowerfactorTooLow event is triggered.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "phase3PowerfactorLowThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Phase 3 power factor below which the phase3PowerfactorTooLow event is triggered.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "supplyVoltageHighThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Supply voltage above which the supplyVoltageTooHigh event is triggered.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "supplyVoltageLowThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Supply voltage below which the supplyVoltageTooLow event is triggered.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "phase1VoltageHighThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "RMS voltage above which the phase1VoltageTooHigh event is triggered.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "phase1VoltageLowThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "RMS voltage below which the phase1VoltageTooLow event is triggered.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "phase2VoltageHighThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "RMS voltage above which the phase2VoltageTooHigh event is triggered.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "phase2VoltageLowThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "RMS voltage below which the phase2VoltageTooLow event is triggered.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "phase3VoltageHighThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "RMS voltage above which the phase3VoltageTooHigh event is triggered.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "phase3VoltageLowThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "RMS voltage below which the phase3VoltageTooLow event is triggered.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "totalCurrentHighThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "RMS current above which the currentTooHigh event is triggered.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "totalCurrentLowThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "RMS current below which the currentTooLow event is triggered.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "neutralCurrentHighThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "RMS current above which the neutralCurrentTooHigh event is triggered.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "phase1CurrentHighThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "RMS current above which the phase1CurrentTooHigh event is triggered.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "phase1CurrentLowThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "RMS current below which the phase1CurrentTooLow event is triggered.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "phase2CurrentHighThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "RMS current above which the phase2CurrentTooHigh event is triggered.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "phase2CurrentLowThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "RMS current below which the phase2CurrentTooLow event is triggered.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "phase3CurrentHighThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "RMS current above which the phase3CurrentTooHigh event is triggered.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "phase3CurrentLowThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "RMS current below which the phase3CurrentTooLow event is triggered.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "phase1ActivePowerHighThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Power above which the phase1ActivePowerTooHigh event is triggered.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "phase1ActivePowerLowThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Power below which the phase1ActivePowerTooLow event is triggered.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "phase2ActivePowerHighThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Power above which the phase2ActivePowerTooHigh event is triggered.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "phase2ActivePowerLowThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Power below which the phase2ActivePowerTooLow event is triggered.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "phase3ActivePowerHighThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Power above which the phase3ActivePowerTooHigh event is triggered.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "phase3ActivePowerLowThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Power below which the phase3ActivePowerTooLow event is triggered.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "totalPower": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Sum of the active power consumed on phase 1, 2 and 3, or just the power for a single phase meter.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "totalVA": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Sum of the apparent power consumed on phase 1, 2 and 3, or just the apparent power for a single phase meter.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "totalVAR": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Sum of the reactive power consumed on phase 1, 2 and 3, or just the reactive power for a single phase meter.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "maxDemandPower": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Maximum peak power consumption.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "totalActiveEnergy": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Total cumulative kWh measured by the meter since installation date (or counter reset).",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "totalReactiveEnergy": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Total cumulative kWh measured by the meter since installation date (or counter reset).",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "totalApparentEnergy": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Total cumulative kWh measured by the meter since installation date (or counter reset).",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "frequency": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Frequency on the line.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "totalPowerFactor": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Total active power divided by total apparent power.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "totalPowerFactorSense": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFactorSense"
                  },
                  {
                    "type": "object",
                    "description": "Sense of power factor (lead or lag).",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "phase1PowerFactor": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Power factor on phase 1.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "phase1PowerFactorSense": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFactorSense"
                  },
                  {
                    "type": "object",
                    "description": "Sense of power factor (lead or lag).",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "phase2PowerFactor": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Power factor on phase 2.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "phase2PowerFactorSense": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFactorSense"
                  },
                  {
                    "type": "object",
                    "description": "Sense of power factor (lead or lag).",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "phase3PowerFactor": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Power factor on phase 3.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "phase3PowerFactorSense": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFactorSense"
                  },
                  {
                    "type": "object",
                    "description": "Sense of power factor (lead or lag).",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "supplyVoltage": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Average between Phase1 RMS Voltage, Phase2 RMS Voltage and Phase3 RMS Voltage, or in the case of a single phase meter just the RMS supply voltage.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "phase1Voltage": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "RMS Voltage between phase 1 and neutral.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "phase2Voltage": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "RMS Voltage between phase 2 and neutral.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "phase3Voltage": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "RMS Voltage between phase 3 and neutral.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "voltagePhase1Phase2": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "RMS Voltage between phase 1 and phase 2.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "voltagePhase2Phase3": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "RMS Voltage between phase 2 and phase 3.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "voltagePhase3Phase1": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "RMS Voltage between phase 3 and phase 1.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "totalCurrent": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Sum of the RMS currents on phase 1, 2 and 3.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "averageCurrent": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Average RMS current on phase 1, 2 and 3.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "neutralCurrent": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "RMS current on neutral.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "phase1Current": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "RMS current on phase 1.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "phase2Current": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "RMS current on phase 2.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "phase3Current": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "RMS current on phase 3.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "phase1ActivePower": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Active Power on phase 1.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "phase2ActivePower": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Active Power on phase 2.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "phase3ActivePower": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Active Power on phase 3.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "phase1ApparentPower": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Apparent Power on phase 1.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "phase2ApparentPower": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Apparent Power on phase 2.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "phase3ApparentPower": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Apparent Power on phase 3.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "phase1ReactivePower": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Reactive Power on phase 1.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "phase2ReactivePower": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Reactive Power on phase 2.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "phase3ReactivePower": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Reactive Power on phase 3.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "phase1ActiveEnergy": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Cumulative active energy on phase 1.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "phase2ActiveEnergy": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Cumulative active energy on phase 2.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "phase3ActiveEnergy": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Cumulative active energy on phase 3.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "worstCurrentTHD": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Worst value for Total Harmonic Distortion on current (all 3 phases).",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "phase1CurrentTHD": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Total Harmonic Distortion on current for phase 1.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "phase2CurrentTHD": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Total Harmonic Distortion on current for phase 2.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "phase3CurrentTHD": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Total Harmonic Distortion on current for phase 3.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "worstVoltageTHD": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Worst Total Harmonic Distortion on voltage (all 3 phases).",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "averageVoltageTHD": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Average value of Total Harmonic Distortion on voltage.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "phase1VoltageTHD": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Total Harmonic Distortion on voltage for phase 1.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "phase2VoltageTHD": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Total Harmonic Distortion on voltage for phase 2.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "phase3VoltageTHD": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Total Harmonic Distortion on voltage for phase 3.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "phase1_2VoltageTHD": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Total Harmonic Distortion on voltage between phase 1 and phase 2.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "phase2_3VoltageTHD": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Total Harmonic Distortion on voltage between phase 2 and phase 3.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "phase3_1VoltageTHD": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Total Harmonic Distortion on voltage between phase 3 and phase 1.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "supplyLossCount": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeInteger"
                  },
                  {
                    "type": "object",
                    "description": "Incrementing count of supply losses. In the case of 3 phases the count of losses on all three phases together. The wrap around value is 2e32 – 1.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "phase1SupplyLossCount": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeInteger"
                  },
                  {
                    "type": "object",
                    "description": "Incrementing count of supply losses on Phase 1. The wrap around value is 2e32 – 1.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "phase2SupplyLossCount": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeInteger"
                  },
                  {
                    "type": "object",
                    "description": "Incrementing count of supply losses on Phase 2. The wrap around value is 2e32 – 1.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "phase3SupplyLossCount": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeInteger"
                  },
                  {
                    "type": "object",
                    "description": "Incrementing count of supply losses on Phase 3. The wrap around value is 2e32 – 1.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "totalPowerTooHigh": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates total power is above the totalPowerHighThreshold.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "totalPowerTooLow": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates total power is below the totalPowerLowThreshold.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "powerfactorTooLow": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the power factor is below the powerfactorThreshold.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "phase1PowerfactorTooLow": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the phase 1 power factor is below the phase1PowerfactorLowThreshold.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "phase2PowerfactorTooLow": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the phase 2 power factor is below the phase1PowerfactorLowThreshold.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "phase3PowerfactorTooLow": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the phase 3 power factor is below the phase1PowerfactorLowThreshold.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "supplyVoltageTooHigh": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates supply voltage is above the supplyVoltageHighThreshold.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "supplyVoltageTooLow": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates supply voltage is below the supplyVoltageLowThreshold.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "phase1VoltageTooHigh": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates phase 1 supply voltage is above the phase1SupplyVoltageHighThreshold.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "phase1VoltageTooLow": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates phase 1 supply voltage is below the phase1SupplyVoltageLowThreshold.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "phase2VoltageTooHigh": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates phase 2 supply voltage is above the phase2SupplyVoltageHighThreshold.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "phase2VoltageTooLow": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates phase 2 supply voltage is below the phase2SupplyVoltageLowThreshold.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "phase3VoltageTooHigh": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates phase 3 supply voltage is above the phase3SupplyVoltageHighThreshold.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "phase3VoltageTooLow": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates phase 3 supply voltage is below the phase3SupplyVoltageLowThreshold.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "totalCurrentTooHigh": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the current is above the totalCurrentHighThreshold.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "totalCurrentTooLow": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the current is below the totalCurrentLowThreshold.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "neutralCurrentTooHigh": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the neutral current is above the neutralCurrentHighThreshold.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "phase1CurrentTooHigh": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the phase 1 current is above the phase1CurrentHighThreshold.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "phase1CurrentTooLow": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the phase 1 current is below the phase1CurrentLowThreshold.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "phase2CurrentTooHigh": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the phase 2 current is above the phase2CurrentHighThreshold.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "phase2CurrentTooLow": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the phase 2 current is below the phase2CurrentLowThreshold.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "phase3CurrentTooHigh": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the phase 3 current is above the phase3CurrentHighThreshold.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "phase3CurrentTooLow": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the phase 3 current is below the phase3CurrentLowThreshold.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "phase1ActivePowerTooHigh": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the phase 1 active power is above the phase1ActivePowerHighThreshold.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "phase1ActivePowerTooLow": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the phase 1 active power is below the phase1ActivePowerLowThreshold.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "phase2ActivePowerTooHigh": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the phase 2 active power is above the phase2ActivePowerHighThreshold.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "phase2ActivePowerTooLow": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the phase 2 active power is below the phase2ActivePowerLowThreshold.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "phase3ActivePowerTooHigh": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the phase 3 active power is above the phase3ActivePowerHighThreshold.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "phase3ActivePowerTooLow": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the phase 3 active power is below the phase3ActivePowerLowThreshold.",
                    "x-talq-mandatory-cms": "false",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "O",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              }
            }
          }
        ]
      },
      "PhotocellFunction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Function"
          },
          {
            "type": "object",
            "x-talq-mandatory-cms": "true",
            "x-talq-mandatory-gw": "false",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "O"
                }
              }
            ],
            "description": "A Photocell function models the capabilities of a photocell that can be used for lighting control. This function shall be supported by the CMS and optionally by the ODNs (Gateway).",
            "properties": {
              "type": {
                "default": "PhotocellFunction",
                "type": "string"
              },
              "onLevel": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Illuminance level at which the photocell switches to on state.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "offLevel": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Illuminance level at which the photocell switches to off state.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "photocellOutput": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBinary"
                  },
                  {
                    "type": "object",
                    "description": "Output state of the photocell. Possible values are ON (means the illuminance level has fallen below the onLevel) and OFF (means the illuminance level has risen above the offLevel).",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "photocellOutputOn": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "The photocell output has changed to ON.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              }
            }
          }
        ]
      },
      "LightSensorFunction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Function"
          },
          {
            "type": "object",
            "x-talq-mandatory-cms": "false",
            "x-talq-mandatory-gw": "false",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "description": "A Light Sensor function models the output of light sensor. This function is optional for both CMS and Gateway, but when supported the requirements in this section shall apply.",
            "properties": {
              "type": {
                "default": "LightSensorFunction",
                "type": "string"
              },
              "levelHighThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Light level above which a levelTooHigh event is triggered.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "levelLowThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Light level below which a levelTooLow event is triggered.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "lightLevel": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Illuminance level.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "levelTooHigh": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the light level is above the levelHighThreshold.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "levelTooLow": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the light level is below the levelLowThreshold.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              }
            }
          }
        ]
      },
      "BinarySensorFunction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Function"
          },
          {
            "type": "object",
            "x-talq-mandatory-cms": "false",
            "x-talq-mandatory-gw": "false",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "description": "A Binary Sensor function can be used to model any sensor that provides a digital, binary output. This function is optional for both CMS and Gateway, but when supported the requirements in this section shall apply.",
            "properties": {
              "type": {
                "default": "BinarySensorFunction",
                "type": "string"
              },
              "level": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBinary"
                  },
                  {
                    "type": "object",
                    "description": "Sensor Output level.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "sensorOutputOn": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the sensor output changed to ON.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              }
            }
          }
        ]
      },
      "GenericSensorFunction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Function"
          },
          {
            "type": "object",
            "x-talq-mandatory-cms": "false",
            "x-talq-mandatory-gw": "false",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "description": "A Generic Sensor function can be used to model any sensor that provides an analog or multilevel output. This function is optional for both CMS and Gateway, but when supported the requirements in this section shall apply.",
            "properties": {
              "type": {
                "default": "GenericSensorFunction",
                "type": "string"
              },
              "levelHighThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Threshold above which a levelTooHigh event is triggered.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-mandatory-gw": "false",
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "levelLowThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Threshold below which a levelTooLow event is triggered.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "level": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Sensor Output level.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "levelTooHigh": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the sensor output level is above the levelHighThreshold.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "levelTooLow": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the sensor output level is below the levelLowThreshold.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              }
            }
          }
        ]
      },
      "TemperatureSensorFunction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Function"
          },
          {
            "type": "object",
            "x-talq-mandatory-cms": "false",
            "x-talq-mandatory-gw": "false",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "description": "The Temperature Sensor function allows a CMS to monitor the temperature in a device and send events in case the value is above/below configurable thresholds.",
            "properties": {
              "type": {
                "default": "TemperatureSensorFunction",
                "type": "string"
              },
              "temperatureHighThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Threshold above which a temperatureTooHigh event is triggered.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "temperatureLowThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Threshold below which a temperatureTooLow event is triggered.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "fireDetectionThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Threshold above which a fireDetected event is triggered.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "temperature": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Output temperature.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "temperatureTooHigh": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the output temperature is above the temperatureHighThreshold.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "temperatureTooLow": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the output temperature is below the temperatureLowThreshold.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "fireDetected": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates a fire has been detected, based on the fireDetectionThreshold configuration or other method.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              }
            }
          }
        ]
      },
      "HumiditySensorFunction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Function"
          },
          {
            "type": "object",
            "x-talq-mandatory-cms": "false",
            "x-talq-mandatory-gw": "false",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "description": "The Humidity Sensor function allows a CMS to monitor the humidity in a device and send events in case the value is above/below configurable thresholds.",
            "properties": {
              "type": {
                "default": "HumiditySensorFunction",
                "type": "string"
              },
              "humidityLowThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Threshold below which a humidityTooLow event is triggered.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "humidityHighThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Threshold above which a humidityTooHigh event is triggered.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "humidity": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Output humidity.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "humidityTooLow": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the output humidity is below the humidityLowThreshold.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "humidityTooHigh": {
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the output humidity is above the humidityHighThreshold.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              }
            }
          }
        ]
      },
      "ParticulateMatterSensorFunction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Function"
          },
          {
            "type": "object",
            "x-talq-mandatory-cms": "false",
            "x-talq-mandatory-gw": "false",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "description": "The Particulate Matter Sensor function allows a CMS to monitor the PM10, PM2.5 and PM1 in a device and send events in case the value is above/below configurable thresholds.",
            "properties": {
              "type": {
                "default": "ParticulateMatterSensorFunction",
                "type": "string"
              },
              "pm1HighThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Threshold above which a pm1TooHigh event is triggered.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "pm2-5HighThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Threshold above which a pm2-5TooHigh event is triggered.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "pm10HighThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Threshold above which a pm10TooHigh event is triggered.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "pm1": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Output pm1.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-mandatory-gw": "false",
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "pm2-5": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Output pm2-5.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "pm10": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Output pm10.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "pm1TooHigh": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the output pm1 is above the pm1HighThreshold.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "pm2-5TooHigh": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the output pm2-5 is above the pm2-5HighThreshold.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "pm10TooHigh": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the output pm10 is above the pm10HighThreshold.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              }
            }
          }
        ]
      },
      "PresenceSensorFunction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Function"
          },
          {
            "type": "object",
            "x-talq-mandatory-cms": "false",
            "x-talq-mandatory-gw": "false",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "description": "The Presence Sensor function allows a CMS to detect presence. This function may be used in Parking Place detectors as well as in dynamic outdoor lighting scenario.",
            "properties": {
              "type": {
                "default": "PresenceSensorFunction",
                "type": "string"
              },
              "presenceStatus": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Presence status.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "presenceStatusChanged": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the presence status changed.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              }
            }
          }
        ]
      },
      "MovementSensorFunction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Function"
          },
          {
            "type": "object",
            "x-talq-deprecated-by": "2.2.0",
            "x-talq-mandatory-cms": "false",
            "x-talq-mandatory-gw": "false",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "description": "The Movement Sensor function allows a CMS to detect movement. This function may be used in a Waste Container sensor to detect that container gets emptied or is not in the proper position, as well as in asset tracking applications.[DEPRECATED: This function has been deprecated and it will be removed in the next MAJOR release. Please use the new LocationSensorFunction instead.]",
            "properties": {
              "type": {
                "default": "MovementSensorFunction",
                "type": "string"
              },
              "movementThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "The distance of movement, in meters, relative to the location from the last movementDetected event.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "movementDetected": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the location changed.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "notInProperPosition": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the device is not in its correct position.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              }
            }
          }
        ]
      },
      "LocationSensorFunction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Function"
          },
          {
            "type": "object",
            "x-talq-mandatory-cms": "false",
            "x-talq-mandatory-gw": "false",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "description": "The Location Sensor Function is used to indicate that an object has changed position attributes configurable by the CMS or based on internal setup of the vendor. For example, a specific location (latitude, longitude) of a device could be defined by the vendor. If the device is equipped with a GPS, it could send a specific event indicating that its position is different to the one defined by the CMS. We might also want to let the configuration to the vendor itself and simply define events notifying the CMS that the default configuration has changed. For example, a garbage bin could have its location defined based on a sensor placed on the floor. If the bin is not above this sensor, the vendor will trigger an event. In this last case, the CMS does not need to configure anything. ",
            "properties": {
              "type": {
                "default": "LocationSensorFunction",
                "type": "string"
              },
              "expectedLocation": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeLocation"
                  },
                  {
                    "type": "object",
                    "description": "Nominal location of the device.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "locationChangedThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Distance (meters)",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "location": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeLocation"
                  },
                  {
                    "type": "object",
                    "description": "Location of the device.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "locationChanged": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Triggered when the difference between location and expectedLocation is above locationChangedThreshold.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              }
            }
          }
        ]
      },
      "AccelerometerFunction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Function"
          },
          {
            "type": "object",
            "x-talq-mandatory-cms": "false",
            "x-talq-mandatory-gw": "false",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "description": "The Accelerometer Function is used to indicate that an object has had an impact with another object and to report its acceleration. For example, a light controller placed on a light pole and equipped with an accelerometer can be used to detect an impact (car accident on the light pole).",
            "properties": {
              "type": {
                "default": "AccelerometerFunction",
                "type": "string"
              },
              "impactDetectedAccelerationThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Threshold for acceleration above which impactDetected is triggered (g).",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "accelerationSamplingPeriod": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "In seconds.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "accelerationX": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Maximum acceleration on the X axis (g) over accelerationSamplingPeriod.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "accelerationY": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Maximum acceleration on the Y axis (g) over accelerationSamplingPeriod.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "accelerationZ": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Maximum acceleration on the Z axis (g) over accelerationSamplingPeriod.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "acceleration": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Maximum acceleration of the device (g) over accelerationSamplingPeriod.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "impactDetected": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates that the acceleration is above impactDetectedAccelerationThreshold.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              }
            }
          }
        ]
      },
      "OrientationFunction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Function"
          },
          {
            "type": "object",
            "x-talq-mandatory-cms": "false",
            "x-talq-mandatory-gw": "false",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "description": "The Orientation function is used to indicate that an object has changed orientation based on attributes configurable by the CMS or based on internal setup of the vendor. The target orientation of the object could be configured by the CMS or could be handled by the vendor. In the latter case, the configuration is let to the vendor itself and events are triggered depending on internal configuration.",
            "properties": {
              "type": {
                "default": "OrientationFunction",
                "type": "string"
              },
              "expectedOrientation": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeOrientation"
                  },
                  {
                    "type": "object",
                    "description": "Nominal orientation of the device.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "orientationChangedThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeOrientation"
                  },
                  {
                    "type": "object",
                    "description": "Threshold above which orientationChanged is triggered.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "orientation": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeOrientation"
                  },
                  {
                    "type": "object",
                    "description": "Orientation of the device.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "orientationChanged": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Triggered when orientation differs from expectedOrientation by more than orientationChangedThreshold on any angle, or when the device determines itself that its orientation has changed.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              }
            }
          }
        ]
      },
      "BatteryLevelSensorFunction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Function"
          },
          {
            "type": "object",
            "x-talq-mandatory-cms": "false",
            "x-talq-mandatory-gw": "false",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "description": "The Battery Level Sensor function allows to measure the charge of the battery, monitor the battery and send events in case the value is above/below configurable thresholds.",
            "properties": {
              "type": {
                "default": "BatteryLevelSensorFunction",
                "type": "string"
              },
              "powerSource": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributePowerSource"
                  },
                  {
                    "type": "object",
                    "description": "The power source of battery. The value can be Mains, Battery or Other",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "batteryLevelLowThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Threshold below which a batteryLevelTooLow event is triggered.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "batteryLevel": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Battery level.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "batteryLevelTooLow": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the battery level is below the batteryLevelLowThreshold.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              }
            }
          }
        ]
      },
      "FillingLevelSensorFunction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Function"
          },
          {
            "type": "object",
            "x-talq-mandatory-cms": "false",
            "x-talq-mandatory-gw": "false",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "description": "The Filling Level Sensor function allows to measure how full a container is and send events in case the value is above/below configurable thresholds.",
            "properties": {
              "type": {
                "default": "FillingLevelSensorFunction",
                "type": "string"
              },
              "levelHighThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Threshold above which a fillingHeight event is triggered.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "containerHeight": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Container height.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "containerVolume": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Container volume.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "fillingHeight": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Filling container height.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "fillingPercentage": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributePercent"
                  },
                  {
                    "type": "object",
                    "description": "Filling percentage.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "containerFull": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the container filling height is above levelHighThreshold.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              }
            }
          }
        ]
      },
      "SolarBatteryChargerFunction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Function"
          },
          {
            "type": "object",
            "x-talq-mandatory-cms": "false",
            "x-talq-mandatory-gw": "false",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "description": "A solar battery charger is used to charge a battery with solar energy. Typical use cases are energy demanding off-grid applications like solar lighting, solar vehicle charging (cars and bikes), public transit information, traffic control, public security (CCTV) and many more.",
            "properties": {
              "type": {
                "default": "SolarBatteryChargerFunction",
                "type": "string"
              },
              "inputVoltage": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Measured DC voltage of the charger input (V).",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "inputCurrent": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Measured DC current of the charger input (A).",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "outputVoltage": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Output voltage (V).",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "outputCurrent": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Output current (A).",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "chargerTemperature": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Measured temperature of the charger circuit (C).",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "PVTemperature": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Measured temperature of the attached photovoltaic module (C).",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "accumulatedEnergy": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Accumulated energy yield since accumulatedSince (Wh).",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "startChargeInputVoltage": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloatKVPArray"
                  },
                  {
                    "type": "object",
                    "description": "Configuration parameter to set input voltage thresholds at different temperatures at which the battery charger shall start charging the battery (V, C). The values are stored as a list of KVPs (Key-Value Pair), where the key is the temperature and the value is the voltage.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "endChargeInputVoltage": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloatKVPArray"
                  },
                  {
                    "type": "object",
                    "description": "Configuration parameter to set input voltage thresholds at different temperatures at which the battery charger shall cease charging the battery (V, C). The values are stored as a list of KVPs (Key-Value Pair), where the key is the temperature and the value is the voltage.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "highTemperatureThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Threshold above which the highTemperature event is triggered (C).",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "lowTemperatureThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Threshold above which the lowTemperature event is triggered (C).",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "highPowerThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Threshold above which the highPower event is triggered (W).",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "accumulatedSince": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeDateTime"
                  },
                  {
                    "type": "object",
                    "description": "Sets the date and time at which accumulatedEnergy is reset to zero",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "highTemperature": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the measured temperature is above the high temperature threshold.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "lowTemperature": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the measured temperature is below the low temperature threshold.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "highPower": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates the power exceeds highPowerThreshold.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "charging": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates whether the battery is being charged.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              }
            }
          }
        ]
      },
      "BatteryManagementSystemFunction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Function"
          },
          {
            "type": "object",
            "x-talq-mandatory-cms": "false",
            "x-talq-mandatory-gw": "false",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "description": "A battery management system is used to monitor the charging and discharging of a battery and protect the battery. Typical use cases are (off-grid) applications like solar lighting, solar vehicle charging (cars and bikes), public transit information, traffic control, public security (CCTV) and many more, where the battery is charged and discharged on a regular basis.",
            "properties": {
              "type": {
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                "default": "BatteryManagementSystemFunction",
                "type": "string"
              },
              "batteryChemistry": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeString"
                  },
                  {
                    "type": "object",
                    "description": "Attribute to define the battery chemistry. (e.g.: Lead Acid, Lithium-Iron-Phosphate (LiFePO4), Nickel-Metal-Hydrid (NiMH), Lithium-Titanate-Oxide (LTO), ...)",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "nominalVoltage": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Attribute to set the nominal voltage of the battery in V (at room temperature). This can be used to calculate the capacity and to configure the BMS.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "nominalCapacity": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Attribute to set the nominal capacity of the battery in Ah (at room temperature).",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "batteryVoltage": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Measurement of the battery voltage in V.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "batteryCurrent": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Measurement of the battery current in A. This value can be negative due to polarity.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "batteryLevel": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Percentage.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "estimatedCapacity": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "This attribute gives an estimated remaining capacity of the battery in Ah. This depends very much on the wear and age of the battery.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "temperature": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Temperature at the battery in C.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "batteryEOCVoltageTemperatureMap": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloatKVPArray"
                  },
                  {
                    "type": "object",
                    "description": "End of charge voltages (V) of the battery for various temperatures (C). The values are stored as a list of KVPs (Key-Value Pair), where the key is the temperature and the value is the voltage.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "batteryEODVoltageTemperatureMap": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloatKVPArray"
                  },
                  {
                    "type": "object",
                    "description": "End of discharge voltages (V) of the battery for various temperatures (C). The values are stored as a list of KVPs (Key-Value Pair), where the key is the temperature and the value is the voltage.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "batteryFullThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Level threshold to indicate that the battery is full.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "batteryEmptyThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Level threshold to indicate that the battery is empty.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "overCurrentChargeThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Maximum charge current threshold (A).",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "overCurrentDischargeThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Maximum discharge current threshold (A).",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "highTemperatureThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Threshold above which the highTemperature event is triggered (C).",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "batteryFull": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates that the battery is full.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "batteryEmpty": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates that the battery is empty.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "overCurrentCharge": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates that the charge current is higher than the threshold.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "overCurrentDischarge": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates that the discharge current is higher than the threshold.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "highTemperature": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Indicates that the measured temperature is higher than the threshold.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              }
            }
          }
        ]
      },      
      "TrafficCounterFunction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Function"
          },
          {
            "type": "object",
            "x-talq-mandatory-cms": "false",
            "x-talq-mandatory-gw": "false",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "description": "The Traffic Counter Function is used to provide statistics on the number of vehicles passing on the road. It allows to have the number of pedestrians, bicycles, cars or trucks for a certain period of time that is configurable by the CMS. It also allows to count the number of vehicles using diesel or petrol.",
            "properties": {
              "type": {
                "default": "TrafficCounterFunction",
                "type": "string"
              },
              "roadUserNumber": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeInteger"
                  },
                  {
                    "type": "object",
                    "description": "Number of road users of the specified type detected over the sampling period.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "accumulatedRoadUserNumber": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeInteger"
                  },
                  {
                    "type": "object",
                    "description": "measurement Number of road users of the specified type detected since accumulatedSince.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "roadUser": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeRoadUser"
                  },
                  {
                    "type": "object",
                    "description": "Type of road user (pedestrian, bicycle, motorcycle, car, truck, diesel vehicle, petrol vehicle, electric vehicle, scooter, others).",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "accumulatedSince": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeDateTime"
                  },
                  {
                    "type": "object",
                    "description": "Sets the date and time at which accumulatedRoadUserNumber is reset to zero.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "heavyTrafficDetected": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Triggered if the traffic measured over the sampling period is above heavyTrafficDetectedThreshold.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "heavyTrafficDetectedThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeInteger"
                  },
                  {
                    "type": "object",
                    "description": "Threshold above which heavyTrafficDetected is triggered.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "trafficSamplingPeriod": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeInteger"
                  },
                  {
                    "type": "object",
                    "description": "Used by heavyTrafficDetected and roadUserNumber. In seconds.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              }
            }
          }
        ]
      }, 
      "FluidLevelSensorFunction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Function"
          },
          {
            "type": "object",
            "x-talq-mandatory-cms": "false",
            "x-talq-mandatory-gw": "false",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "description": "The Fluid Level Sensor function allows to collect data and events about fluid levels. It could be used to measure fluid levels in channels, lakes, containers, etc.",
            "properties": {
              "type": {
                "default": "FluidLevelSensorFunction",
                "type": "string"
              },
              "fluidLevelTooHighThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Threshold above which fluidLevelTooHighThreshold is triggered. In meters.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "fluidLevelTooLowThreshold": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Threshold below which fluidLevelTooLowThreshold is triggered. In meters.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "distanceSensorBottom": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Distance between the sensor and the bottom of the channel, lake, container, etc. In meters.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "configuration"
                  }
                ]
              },
              "fluidLevel": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeFloat"
                  },
                  {
                    "type": "object",
                    "description": "Fluid level in meters.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "true",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "x-talq-scope": "measurement"
                  }
                ]
              },
              "fluidLevelTooHigh": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Triggered when fluidLevel is above fluidLevelTooHighThreshold.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              },
              "fluidLevelTooLow": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AttributeBoolean"
                  },
                  {
                    "type": "object",
                    "description": "Triggered when fluidLevel is below fluidLevelTooLowThreshold.",
                    "x-talq-mandatory-cms": "true",
                    "x-talq-mandatory-gw": "false",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "O"
                        }
                      }
                    ],
                    "x-talq-scope": "event"
                  }
                ]
              }
            }
          }
        ]
      }, 
      "LampType": {
        "description": "The lamp type consists of a set of attributes that together characterize a given lamp and control gear combination.",
        "type": "object",
        "required": [
          "address",
          "name",
          "controlType"
        ],
        "x-talq-profiles":[
          {
            "lighting": {
              "cms": "O",
              "gw": "O"
            }
          }
        ],
        "properties": {
          "address": {
            "description": "TALQ Address of the lamp type.",
            "type": "string",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "M"
                }
              }
            ]
          },
          "name": {
            "description": "Descriptive name of the lamp type.",
            "type": "string",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "M"
                }
              }
            ]
          },
          "controlType": {
            "description": "Describes the type of control/dimming interface between the lamp actuator function and the control gear or within the control gear in case lamp actuator is embedded in the control gear.",
            "type": "string",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "M"
                }
              }
            ],
            "enum": [
              "DALI",
              "1-10V",
              "PWM",
              "Bilevel",
              "Switch",
              "Other"
            ],
            "default": "DALI"
          },
          "wattage": {
            "description": "Expected consumed power of the lamp and control gear.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "type": "number",
            "format": "float",
            "minimum": 0,
            "maximum": 100000
          },
          "controlVoltMax": {
            "description": "DC voltage that gives the maximum light output in a 1-10V control type.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "type": "number",
            "format": "float",
            "minimum": 0,
            "maximum": 10
          },
          "controlVoltMin": {
            "description": "DC voltage that gives the minimum light output in a 1-10V control type.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "type": "number",
            "format": "float",
            "minimum": 0,
            "maximum": 10
          },
          "minLightOutput": {
            "$ref": "#/components/schemas/DimLevel",
            "description": "Sets the minimum light output under which the lamp actuator will not perform the command.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ]
          },
          "virtualLightOutput": {
            "$ref": "#/components/schemas/DimLevel",
            "description": "Sets the light output that the lamp actuator shall consider to be equal to 100%. This scaling factor shall be applied before applying the required control voltage. The light command output shall be scaled using this factors, so that 100% in the light command corresponds to this value before applying CLO and maintenance factors.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ]
          },
          "daliLedLinear": {
            "description": "If set to True indicates the dimming curve is linear for DALI control type (some lamp control gear only use linear).",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "type": "boolean",
            "default": false
          },
          "warmUpTime": {
            "description": "Sets the delay after a Switch ON command during which the lamp actuator shall not perform any dimming command.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "type": "integer"
          },
          "coolDownTime": {
            "description": "Sets the delay after a Switch OFF command during which the lamp actuator shall not perform any Switch ON command.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "type": "integer"
          },
          "lowCurrentThreshold": {
            "description": "Level of the luminaire supply current under which the ODN shall detect a currentTooLow event.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "type": "number",
            "format": "float"
          },
          "highCurrentThreshold": {
            "description": "Level of the luminaire supply current above which the ODN shall detect a currentTooHigh event.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "type": "number",
            "format": "float"
          },
          "lowLampVoltageThreshold": {
            "description": "Level of lamp voltage (not supply voltage) under which the ODN shall detect a voltageTooLow event.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "type": "number",
            "format": "float"
          },
          "highLampVoltageThreshold": {
            "description": "Level of lamp voltage (not supply voltage) above which the ODN shall detect a voltageTooHigh event.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "type": "number",
            "format": "float"
          },
          "highTemperatureThreshold": {
            "description": "Temperature above which the temperatureTooHigh event is triggered.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "type": "number",
            "format": "float"
          },
          "maxOperatingHours": {
            "description": "Maximum number of operating hours that the lamp is supposed to live with a given specification. This attribute can be used to set the old lamp attributes when the lamp reaches its expected useful life.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "type": "integer"
          },
          "powerLightGradient": {
            "description": "The ratio of change of light level divided by change in power level, which is the slope of the Light level vs. Power curve. It is assumed that 100% power refers to 100% light output. If this attribute is not specified, the attribute shall be set to 1 as default.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "type": "number",
            "format": "float"
          },
          "lampPowerTolerance": {
            "description": "The number of watts by which the actual lamp power can be in error from the expected lamp power (as defined by the dimming curve and the current dimming level) before a lamp power event (lampPowerTooHigh or lampPowerTooLow) is triggered.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "type": "number",
            "format": "float"
          },
          "lampPowerHighThreshold": {
            "description": "The absolute number of watts above which the absolutLampPowerTooHigh event is triggered.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "type": "number",
            "format": "float"
          },
          "lampPowerLowThreshold": {
            "description": "The absolute number of watts below which the absolutLampPowerTooLow event is triggered.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "type": "number",
            "format": "float"
          },
          "powerFactorThreshold": {
            "description": "The threshold below which powerFactorTooLow event is triggered.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "type": "number",
            "format": "float"
          },
          "lumenDepreciationCurve": {
            "description": "Set of entries (operating hours, correction factor in %) that form a piece wise linear approximation of the lumen depreciation correction factor curve. The last correction factor should be 100%.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "type": "object",
            "properties": {
              "entries": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "operatingHours": {
                      "type": "integer"
                    },
                    "percentage": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 100
                    }
                  }
                },
                "minItems": 1
              }
            }
          },
          "cloType": {
            "description": "Determines where CLO is implemented in the lamp control gear or in the ODN (e.g. control device). This CLO profile is needed even when CLO is implemented by the driver in order to obtain the expected lamp power.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "type": "string",
            "enum": [
              "controller",
              "driver"
            ]
          }
        }
      },
      "gMonthDay": {
        "description": "Recurring period of time with yearly day. The string format is '--mm-dd'",
        "type": "string",
        "pattern": "^(--(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))$"
      },
      "gDay": {
        "description": "Recurring period of time with monthly day. The string format is '---dd'",
        "type": "string",
        "pattern": "^(---(0[1-9]|[12]\\d|3[01]))$"
      },
      "ccDate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Condition"
          },
          {
            "type": "object",
            "description": "Each item defines a day within each month (---dd) or day within a specific month (--mm-dd). An item can also define a range by specifying an end in the same format as the start of the item.",
            "required": [
              "dates"
            ],
            "properties": {
              "type": {
                "type": "string",
                "default": "ccDate"
              },
              "dates": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "start"
                  ],
                  "properties": {
                    "start": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/gDay"
                        },
                        {
                          "$ref": "#/components/schemas/gMonthDay"
                        }
                      ]
                    },
                    "end": {
                      "anyOf": [
                        {
                          "$ref": "#/components/schemas/gDay"
                        },
                        {
                          "$ref": "#/components/schemas/gMonthDay"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "ccDay": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Condition"
          },
          {
            "type": "object",
            "description": "List of days of the week. Each item defines a weekday using numbers 1 to 7 where 1 is Monday. An item can also define a range by specifying an end weekday as well.",
            "required": [
              "days"
            ],
            "properties": {
              "type": {
                "type": "string",
                "default": "ccDay"
              },
              "days": {
                "type": "array",
                "maxItems": 7,
                "items": {
                  "type": "object",
                  "required": [
                    "start"
                  ],
                  "properties": {
                    "start": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 7
                    },
                    "end": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 7
                    }
                  }
                }
              },
              "occurrences": {
                "description": "The 'occurrences' property allows to execute a control program every Xth Monday or Tuesday or Wednesday or ... of the month, where X is from 1 to 5. The special character 'L' specifies the last Monday, Tuesday, Wednesday, ... of the month. The days' 'start' property indicates which day is considered: 1=Monday, 2=Tuesday, 3=Wednesday, ... . As an example, the rule for 'the second Monday of the month' would be achieved with this configuration: days=[{start=1}], occurrences=['2']",
                "type": "array",
                "maxItems": 5,
                "uniqueItems": true,
                "items": {
                  "type": "string",
                  "pattern": "^[1-5L]$"
                }
              }
            }
          }
        ]
      },
      "Condition": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "description": "Type of condition",
            "type": "string",
            "enum": [
              "ccDate",
              "ccDay"
            ]
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "CalendarRule": {
        "type": "object",
        "description": "A rule is composed of a day-based or a date-based condition and an action.",
        "x-talq-profiles":[
          {
            "lighting": {
              "cms": "M",
              "gw": "M"
            }
          }
        ],
        "required": [
          "program"
        ],
        "properties": {
          "startDate": {
            "type": "string",
            "description": "Start date when the rule becomes active. If not specified, the start date is since the beginning of time.",
            "anyOf": [
              {
                "type": "string",
                "format": "date",
                "description": "The string date format is 'yyyy-mm-dd' as defined by OAS3 (full-date - RFC3339)"
              },
              {
                "$ref": "#/components/schemas/gMonthDay"
              }
            ],
            "default": "--01-01"
          },
          "endDate": {
            "type": "string",
            "description": "Date when the rule becomes inactive. If not specified, the rule shall apply always after the startDate.",
            "anyOf": [
              {
                "type": "string",
                "format": "date",
                "description": "The string date format is 'yyyy-mm-dd' as defined by OAS3 (full-date - RFC3339)"
              },
              {
                "$ref": "#/components/schemas/gMonthDay"
              }
            ],
            "default": "--12-31"
          },
          "condition": {
            "description": "The condition can be date or day based. If there is no condition, the rule applies unconditionally.",
            "$ref": "#/components/schemas/Condition"
          },
          "program": {
            "description": "The identifier of the control program that the ODN shall apply if the condition is met and has the highest priority.",
            "type": "string"
          }
        }
      },
      "Calendar": {
        "type": "object",
        "description": "A calendar is a set of rules that describe which days and which control program should be applied to which target functions by the ODN. The Rules priorities (eg between the first Thursday of the month and the 3rd of June if the 3rd of June is the first Thursday of the month) is defined by the order in the list.",
        "x-talq-profiles":[
          {
            "lighting": {
              "cms": "M",
              "gw": "M"
            }
          }
        ],
        "required": [
          "id",
          "ownerCMS"
        ],
        "properties": {
          "id": {
            "description": "The calendar identifier",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "M"
                }
              }
            ],
            "type": "string"
          },
          "ownerCMS": {
            "description": "The address of the owner CMS",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "M"
                }
              }
            ],
            "type": "string"
          },
          "rules": {
            "description": "Ordered list of rules.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "M"
                }
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CalendarRule"
            }
          },
          "defaultProgram": {
            "description": "Identifier of control program which acts as default if no rule matches",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "M"
                }
              }
            ],
            "type": "string"
          }
        }
      },
      "SensorReference": {
        "description": "TALQ Address of the function representing the sensor to be used as reference. If no reference is provided, the ODN is responsible for deciding which sensor to use. Up to two sensor addresses may be included in the reference, and this case, it is up to the ODN to decide how to use the addresses.",
        "type": "object",
        "properties": {
          "sensorAddresses": {
            "description": "Up to two sensor addresses may be included in the reference, and this case, it is up to the ODN to decide how to use the addresses.",
            "type": "array",
            "minItems": 0,
            "maxItems": 2,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ControlProgram": {
        "type": "object",
        "description": "A control program is a generic mechanism, or template, to automate the control of a system within a day",
        "required": [
          "type",
          "id",
          "ownerCMS"
        ],
        "properties": {
          "type": {
            "description": "Type of Control Program, used for serializing purposes",
            "type": "string"
          },
          "id": {
            "description": "The control program identifier",
            "type": "string"
          },
          "ownerCMS": {
            "description": "The address of the owner CMS",
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ControlProgramOne": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ControlProgram"
          },
          {
            "type": "object",
            "description": "A lighting control program is a combination of control actions and trigger conditions that define the lighting control behavior across ODNs in a descriptive way.",
            "required": [
              "activePeriods",
              "fixedTimeControls"
            ],
            "properties": {
              "type": {
                "type": "string",
                "default": "ControlProgramOne"
              },
              "activePeriods": {
                "description": "The list of active periods. An active period defines the period of time during a day when the control program is active. The AbsoluteActivePeriod is mandatory for CMS and GW. The other AstroClockActivePeriod, SensorActivePeriod and AstroAndSensorActivePeriod are mandatory for CMS, at least one of them shall be supported by the GW.",
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ActivePeriod"
                    },
                    {
                      "$ref": "#/components/schemas/AbsoluteActivePeriod"
                    },
                    {
                      "$ref": "#/components/schemas/AstroClockActivePeriod"
                    },
                    {
                      "$ref": "#/components/schemas/SensorActivePeriod"
                    },
                    {
                      "$ref": "#/components/schemas/AstroAndSensorActivePeriod"
                    }
                  ]
                }
              },
              "fixedTimeControls": {
                "description": "The list of fixed time controls.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FixedTimeControl"
                }
              },
              "astroClockTimeControls": {
                "description": "The list of astroclock time controls.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AstroClockTimeControl"
                }
              },
              "dynamicControls": {
                "description": "The list of dynamic controls.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DynamicControl"
                }
              }
            }
          }
        ]
      },
      "FixedTimeControl": {
        "type": "object",
        "description": "The Fixed Time Control element defines the control schedule during the day. This control is mandatory for CMS and GW.",
        "x-talq-profiles":[
          {
            "lighting": {
              "cms": "M",
              "gw": "M"
            }
          }
        ],
        "required": [
          "startTime",
          "command"
        ],
        "properties": {
          "startTime": {
            "description": "Start time (local time including DST) of the fixed time control element. The period will end at the beginning of the next fixed time control element in the program. The next fixed time control element is with respect to the time order of the elements. The order of fixed time control entries within a program shall be in increasing order always to allow the next element to be identified easily. It is not allowed to have two entries with exactly the same start time. In case no start time is available, the implementation should use the last value based on the program executed on the previous day. If such value is also not available, the last value according to the control program description should be used (assuming programs wraparound from day to day).",
            "type": "string",
            "format": "time"
          },
          "command": {
            "$ref": "#/components/schemas/CommandBase"
          }
        }
      },
      "DynamicControl": {
        "type": "object",
        "description": "The Dynamic Control elements define additional control on top of the control already defined by the Fixed Time Control. This includes the period when the dynamic control is to be applied, and the effect to be applied. If multiple elements are specified, the order of active elements in the JSON sequence determines the priority where the first element has the highest priority and the last one has the lowest priority. This control is optional for CMS and GW.",
        "x-talq-profiles":[
          {
            "lighting": {
              "cms": "O",
              "gw": "O"
            }
          }
        ],
        "required": [
          "period",
          "effect"
        ],
        "properties": {
          "period": {
            "type": "object",
            "required": [
              "startTime",
              "endTime"
            ],
            "properties": {
              "startTime": {
                "description": "Local Time (including DST) when the dynamic control element becomes active.",
                "type": "string",
                "format": "time"
              },
              "endTime": {
                "description": "Local Time (including DST) when the dynamic control element becomes inactive.",
                "type": "string",
                "format": "time"
              }
            }
          },
          "effect": {
            "$ref": "#/components/schemas/ControlEffect"
          }
        }
      },
      "AstroClockTimeControl": {
        "type": "object",
        "description": "The AstroClock Time Control element defines the control based on a sunrise/sunset offset. The operation is applied over the existing fixedTimeControls, so with each offset for sunrise or sunset, an operation will be applied over the existing state coming from the fixedTimeControls.",
        "x-talq-profiles":[
          {
            "lighting": {
              "cms": "O",
              "gw": "O"
            }
          }
        ],
        "required": [
          "offset",
          "solarEventType",
          "operation",
          "command"
        ],
        "properties": {
          "offset": {
            "description": "Offset in minutes to apply to the calculated time (sunrise or sunset). Both positive and negative values are allowed for this attribute. The period will end at the beginning of the next AstroClock time control element in the program.",
            "type": "integer"
          },
          "solarEventType": {
            "description": "Type of solar event to which the offset is applied: sunrise or sunset",
            "type": "string",
            "enum": [
              "sunrise",
              "sunset"
            ]
          },
          "operation": {
            "description": "The operation to be executed on the new command and the current state coming from the correspondent fixedTimeControl.",
            "$ref": "#/components/schemas/EffectOperation"
          },
          "command": {
            "description": "Command to be used by the operation.",
            "$ref": "#/components/schemas/CommandBase"
          }
        }
      },
      "SensorControlSource": {
        "description": "Source of commands. If the source is within the ODN, it is the responsibility of the ODN to 'connect' the source to the program. If the source is outside the ODN, it is the responsibility of the CMS to also forward the control commands to the ODN running this program.",
        "type": "object",
        "properties": {
          "sensor": {
            "$ref": "#/components/schemas/SensorReference"
          }
        }
      },
      "EffectOperation": {
        "description": "Operation to be executed on the new command and the current state to determine the action to be applied. These are the descriptions of each operation: Set: Override the current state.; Max: Maximum between the new state (defined by the dynamic control element) and the current state defined by the program. This operation shall have the effect of increasing the current state.; Min: Minimum between the new state (defined by the dynamic control element) and the current state defined by the program. This operation shall have the effect of decreasing the current state.; Add: Adds the new state (defined by the dynamic control element) to the current state defined by the program.; Sub: Subtracts the new state (defined by the dynamic control element) from the current state defined by the program.; Mul: Multiplies the new state (defined by the dynamic control element) by the current state defined by the program. The Set operation is mandatory for CMS and GW, all other operations are optional for CMS and GW.",
        "type": "string",
        "enum": [
          "Set",
          "Max",
          "Min",
          "Add",
          "Sub",
          "Mul"
        ]
      },
      "ControlEffect": {
        "description": "Abstract element for specifying control effects. This control effect is optional for CMS and GW.",
        "type": "object",
        "required": [
          "type",
          "source",
          "operation"
        ],
        "properties": {
          "type": {
            "description": "Type of control effect",
            "type": "string",
            "enum": [
              "ExternalControlEffect",
              "FixedControlEffect"
            ]
          },
          "source": {
            "$ref": "#/components/schemas/SensorControlSource"
          },
          "operation": {
            "$ref": "#/components/schemas/EffectOperation"
          },
          "holdTime":{
            "description": "how long (in seconds) the value will be held after the sensor event is lowered.",
            "type": "number",
            "format": "float"
          }
        },
        "discriminator": { 
          "propertyName": "type" 
        }  
      },
      "ExternalControlEffect": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ControlEffect"
          },
          {
            "type": "object",
            "description": "Control effect that receives the command from an external source and applies this command using an operation defined by the program.",
            "properties": {
              "type": {
                "type": "string",
                "default": "ExternalControlEffect"
              }
            }
          }
        ]
      },
      "FixedControlEffect": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ControlEffect"
          },
          {
            "type": "object",
            "description": "Control effect uses the active/inactive of a source (sensor) to apply the predefined command with the specified operation.",
            "required": [
              "command"
            ],
            "properties": {
              "type": { 
                "type": "string",  
                "default": "FixedControlEffect"  
              }, 
              "command": {
                "$ref": "#/components/schemas/CommandBase"
              }
            }
          }
        ]
      },
      "ActivePeriod": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "Name of the active period",
            "type": "string",
            "enum": [
              "AbsoluteActivePeriod",
              "AstroClockActivePeriod",
              "SensorActivePeriod",
              "AstroAndSensorActivePeriod"
            ]
          }
        },
        "discriminator": {
          "propertyName": "name"
        }
      },
      "AbsoluteActivePeriod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ActivePeriod"
          },
          {
            "description": "An absolute active period defines the absolute time period during a day. Given an example absolute active period of 20:00 to 6:00 assigned to Day1: If dayOffset=0 (midnight to midnight) the active period is split into two absolute time intervals, one starting at 0:00 to 6:00 and other from 20:00 to 0:00, both on Day1. If dayOffset=12 (noon to noon) the absolute active period starts at 20:00 on Day1 and ends at 6:00 on the next day. ",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "M"
                }
              }
            ],
            "type": "object",
            "required": [
              "startTime",
              "endTime"
            ],
            "properties": {
              "name": {
                "type": "string",
                "default": "AbsoluteActivePeriod"
              },
              "startTime": {
                "description": "Time when the control program becomes active.",
                "type": "string",
                "format": "time"
              },
              "endTime": {
                "description": "Time when the control program becomes inactive.",
                "type": "string",
                "format": "time"
              }
            }
          }
        ]
      },
      "AstroClockActivePeriod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ActivePeriod"
          },
          {
            "description": "The AstroClock active period shall be between the calculated sunset value with the sunsetOffset applied and the calculated sunrise value also with the sunriseOffset offset applied.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "O"
                }
              }
            ],
            "type": "object",
            "required": [
              "sunsetOffset",
              "sunriseOffset"
            ],
            "properties": {
              "name": {
                "type": "string",
                "default": "AstroClockActivePeriod"
              },
              "sunsetOffset": {
                "description": "Offset in minutes to apply to the calculated sunset time. Both positive and negative values are allowed for this attribute.",
                "type": "integer"
              },
              "sunriseOffset": {
                "description": "Offset in minutes to apply to the calculated sunrise time. Both positive and negative values are allowed for this attribute.",
                "type": "integer"
              }
            }
          }
        ]
      },
      "SensorActivePeriod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ActivePeriod"
          },
          {
            "type": "object",
            "description": "The Sensor active period shall be between the instant when the sensor level is less than onLevel value and the instant when the sensor level is larger than the offLevel value.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "O"
                }
              }
            ],
            "required": [
              "sensor",
              "onLevel",
              "offLevel"
            ],
            "properties": {
              "name": {
                "type": "string",
                "default": "SensorActivePeriod"
              },
              "sensor": {
                "description": "A reference to a sensor function output.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SensorReference"
                  }
                ]
              },
              "onLevel": {
                "description": "The active period starts when the reported level of the sensor function becomes less than the onLevel. For example, if dealing with a lampActuator, this means there is not enough ambient light and artificial lighting may be needed.",
                "type": "number",
                "format": "float"
              },
              "offLevel": {
                "description": "The active period ends when the reported level of the sensor function becomes larger than the offLevel. For example, if dealing with a lampActuator, this means there is enough ambient light and artificial light may not be needed.",
                "type": "number",
                "format": "float"
              }
            }
          }
        ]
      },
      "AstroAndSensorActivePeriod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ActivePeriod"
          },
          {
            "type": "object",
            "description": "The AstroAndSensor active period shall be between the instant when the sensor level is less than onLevel value and the instant when the sensor level is larger than the offLevel value, always between the calculated sunset value with the sunsetOffset applied and the calculated sunrise value also with the sunriseOffset offset applied.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "O"
                }
              }
            ],
            "required": [
              "sensor",
              "sunsetOffset",
              "sunriseOffset",
              "pcActiveBeforeSunset",
              "pcActiveBeforeSunrise"
            ],
            "properties": {
              "name": {
                "type": "string",
                "default": "AstroAndSensorActivePeriod"
              },
              "sensor": {
                "description": "Reference to a function implementing the sensor to be used as input. As an example, it may be a Photocell or Light sensor function or a Generic sensor.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SensorReference"
                  }
                ]
              },
              "sunsetOffset": {
                "description": "Offset in minutes to apply to the calculated sunset time. Both positive and negative values are allowed for this attribute.",
                "type": "integer"
              },
              "sunriseOffset": {
                "description": "Offset in minutes to apply to the calculated sunrise time. Both positive and negative values are allowed for this attribute.",
                "type": "integer"
              },
              "pcActiveBeforeSunset": {
                "description": "The period in minutes before the sunset moment where the referenced photocell is taken into account and can make the program active.",
                "type": "integer"
              },
              "pcActiveBeforeSunrise": {
                "description": "The period in minutes before the sunrise moment where the referenced photocell is taken into account and can make the program active.",
                "type": "integer"
              },
              "onLevel": {
                "description": "The active period starts when the reported level of the sensor function becomes less than the onLevel. For example, if dealing with a lampActuator, this means there is not enough ambient light and artificial lighting may be needed.",
                "type": "number",
                "format": "float"
              },
              "offLevel": {
                "description": "The active period ends when the reported level of the sensor function becomes larger than the offLevel. For example, if dealing with a lampActuator, this means there is enough ambient light and artificial light may not be needed.",
                "type": "number",
                "format": "float"
              }              
            }
          }
        ]
      },
      "Group": {
        "description": "A group is set of entities that can be addressed by the same group address. Devices and functions within devices can be assigned to a group. A group may also include other groups as members.",
        "x-talq-profiles":[
          {
            "lighting": {
              "cms": "M",
              "gw": "O"
            }
          }
        ],
        "type": "object",
        "required": [
          "address",
          "members",
          "ownerCMS"
        ],
        "properties": {
          "address": {
            "description": "Group address.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "M"
                }
              }
            ],
            "type": "string"
          },
          "ownerCMS": {
            "description": "The address of the owner CMS",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "O"
                }
              }
            ],
            "type": "string"
          },
          "members": {
            "description": "References of members: device(s) or group(s).",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "M"
                }
              }
            ],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceReference"
            }
          },
          "purpose": {
            "description": "Indicates the main purpose this group is used for.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "type": "string",
            "enum": [
              "unknown",
              "override",
              "calendar",
              "loggerConfig",
              "lampType",
              "attributes"
            ],
            "default": "unknown"
          }
        }
      },
      "LoggerConfig": {
        "description": "A LoggerConfig describes a configuration model for the recording of data from the ODN and reporting of this recorded data to the CMS. A data logger may apply to a set of logical devices which is specified by the sourceAddress whitelist or blacklist attributes. This attribute allows for both white listing and black listing of logical devices. The set of applicable devices shall be defined by the white list reduced by the set defined by the black list. If there is only a black list defined, even if empty, the data logger shall apply to all devices except listed in the black list. If there is no white list, nor a black list, the data logger shall not apply to any logical device.",
        "x-talq-profiles":[
          {
            "lighting": {
              "cms": "M",
              "gw": "M"
            }
          }
        ],
        "type": "object",
        "required": [
          "address",
          "ownerCMS"
        ],
        "properties": {
          "address": {
            "description": "Data logger address.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "M"
                }
              }
            ],
            "type": "string"
          },
          "ownerCMS": {
            "description": "The address of the owner CMS",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "M"
                }
              }
            ],
            "type": "string"
          },
          "sourceAddresses": {
            "type": "object",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "M"
                }
              }
            ],
            "properties": {
              "whiteList": {
                "description": "References of device(s) or group(s) that the logger shall apply to.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceReference"
                }
              },
              "blackList": {
                "description": "References of device(s) or group(s) that the logger shall NOT apply to.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceReference"
                }
              }
            }
          },
          "recordingMode": {
            "description": "Three recording modes are defined: vendor, periodic and event based. Vendor and event recording modes shall be supported by CMS and Gateway.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "M"
                }
              }
            ],
            "oneOf": [
              {
                "$ref": "#/components/schemas/VendorRecordingMode"
              },
              {
                "$ref": "#/components/schemas/PeriodicRecordingMode"
              },
              {
                "$ref": "#/components/schemas/EventRecordingMode"
              }
            ]
          },
          "reportingMode": {
            "description": "Two reporting modes are defined: scheduled and immediate. Immediate reporting mode shall be supported by CMS and Gateway.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "M"
                }
              }
            ],
            "oneOf": [
              {
                "$ref": "#/components/schemas/ScheduledReportingMode"
              },
              {
                "$ref": "#/components/schemas/ImmediateReportingMode"
              }
            ]
          }
        }
      },
      "RecordingMode": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "description": "Type of recording mode",
            "type": "string",
            "enum": [
              "VendorRecordingMode",
              "PeriodicRecordingMode",
              "EventRecordingMode"
            ]
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "VendorRecordingMode": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RecordingMode"
          },
          {
            "description": "In this mode attributes are logged using a recording sampling strategy defined by the Gateway vendor. If no content is defined, the Gateway will record any function/attribute without the CMS specifying it.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "M"
                }
              }
            ],
            "additionalProperties": false,
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "default": "VendorRecordingMode"
              },
              "content": {
                "description": "Functions to log. If a logical device logged does not support one of the listed functions, the data is just not logged. Only the specified supported functions are logged. This allows a single data log to be used for devices with a different set of functions.",
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "function"
                  ],
                  "properties": {
                    "function": {
                      "description": "Either a functionId or functionType shall be included. If a functionType is used, the description shall apply to all functions of that type",
                      "type": "object",
                      "properties": {
                        "functionId": {
                          "type": "string",
                          "description": "Identifier of the function."
                        },
                        "functionType": {
                          "type": "string",
                          "description": "Type of the function."
                        },
                        "attributes": {
                          "description": "One or more attributes of the function to log.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name of the attribute to be logged.",
                                "type": "string"
                              },
                              "onChangeThreshold": {
                                "description": "A positive percentage value. If present, indicates the data shall only be logged if the modulus of the percentage change in the logged attribute value with respect to the previous sample is greater than the onChangeThreshold.",
                                "type": "integer",
                                "minimum": 0,
                                "maximum": 100
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "PeriodicRecordingMode": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RecordingMode"
          },
          {
            "description": "In this mode attributes are logged using a time based profile. A single logger can have multiple sampling profiles for a single set of attributes. Each sampling profile defines one or more instants in time when a sample of all these attributes should be logged.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "type": "object",
            "required": [
              "content",
              "samplingProfiles"
            ],
            "properties": {
              "type": {
                "type": "string",
                "default": "PeriodicRecordingMode"
              },
              "content": {
                "description": "Functions to log. If a logical device logged does not support one of the listed functions, the data is just not logged. Only the specified supported functions are logged. This allows a single data log to be used for devices with a different set of functions.",
                "x-talq-profiles":[
                  {
                    "lighting": {
                      "cms": "M",
                      "gw": "M"
                    }
                  }
                ],
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "function"
                  ],
                  "properties": {
                    "function": {
                      "description": "Either a functionId or functionType shall be included. If a functionType is used, the description shall apply to all functions of that type",
                      "type": "object",
                      "properties": {
                        "functionId": {
                          "type": "string",
                          "description": "Identifier of the function."
                        },
                        "functionType": {
                          "type": "string",
                          "description": "Type of the function."
                        },
                        "attributes": {
                          "description": "One or more attributes of the function to log.",
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "description": "Name of the attribute to be logged.",
                                "type": "string"
                              },
                              "onChangeThreshold": {
                                "description": "A positive percentage value. If present, indicates the data shall only be logged if the modulus of the percentage change in the logged attribute value with respect to the previous sample is greater than the onChangeThreshold.",
                                "type": "integer",
                                "minimum": 0,
                                "maximum": 100
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "samplingProfiles": {
                "description": "Each sampling profile defines one or more instants in time when a sample of all these attributes should be logged.",
                "x-talq-profiles":[
                  {
                    "lighting": {
                      "cms": "M",
                      "gw": "M"
                    }
                  }
                ],
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "samplingStartTime"
                  ],
                  "properties": {
                    "samplingStartTime": {
                      "description": "Time instant to start the sampling process. As defined by OAS3, all options of date-time - RFC3339 shall be supported.",
                      "x-talq-profiles":[
                        {
                          "lighting": {
                            "cms": "M",
                            "gw": "M"
                          }
                        }
                      ],
                      "type": "string",
                      "format": "date-time"
                    },
                    "samplingPeriod": {
                      "description": "Time between consecutive samples. If samplingPeriod is not specified, a single sample shall be taken at the specified samplingStartTime or immediately if samplingStartTime has already past so long as samplingEndTime has not yet past.",
                      "x-talq-profiles":[
                        {
                          "lighting": {
                            "cms": "M",
                            "gw": "O"
                          }
                        }
                      ],
                      "type": "string",
                      "pattern": "P(\\d+D)?(T(\\d+H)?(\\d+M)?(\\d+S)?)?"
                    },
                    "samplingEndTime": {
                      "description": "Time to stop sampling. It shall have the same time format as the samplingStartTime. It shall be supported if periodic sampling is supported. As defined by OAS3, all options of date-time - RFC3339 shall be supported.",
                      "x-talq-profiles":[
                        {
                          "lighting": {
                            "cms": "M",
                            "gw": "O"
                          }
                        }
                      ],
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "EventRecordingMode": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RecordingMode"
          },
          {
            "description": "In this mode the data logger records events which occur within the ODN. The TALQ defined events can be generic, service specific or function specific",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "M"
                }
              }
            ],
            "type": "object",
            "required": [
              "sourceEvents"
            ],
            "properties": {
              "type": {
                "type": "string",
                "default": "EventRecordingMode"
              },
              "sourceEvents": {
                "type": "object",
                "properties": {
                  "whiteList": {
                    "description": "Content is recorded upon the occurrence of the specified events.",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "blackList": {
                    "description": "Content shall not be recorded for the specified events in the blacklist.",
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "ReportingMode": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "description": "Type of reporting mode",
            "type": "string",
            "enum": [
              "ScheduledReportingMode",
              "ImmediateReportingMode"
            ]
          },
          "numberOfRetries": {
            "description": "Maximum number of retries for reporting data collected by a data logger. Default value shall be 3.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "M"
                }
              }
            ],
            "type": "integer",
            "default": 3
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ScheduledReportingMode": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReportingMode"
          },
          {
            "description": "In the scheduled mode, a list of reporting times defines when the data, if any, shall be transferred to the CMS. A randomization factor shall be applied if the randomTime parameter is specified.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "O",
                  "gw": "O"
                }
              }
            ],
            "type": "object",
            "required": [
              "times"
            ],
            "properties": {
              "type": {
                "type": "string",
                "default": "ScheduledReportingMode"
              },
              "times": {
                "description": "Sequence of specified times within a day to report. If no timezone designator (Z or +/- offset), the time shall follow DST.",
                "x-talq-profiles":[
                  {
                    "lighting": {
                      "cms": "M",
                      "gw": "M"
                    }
                  }
                ],
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "time"
                }
              },
              "randomTime": {
                "description": "Amount of time (in seconds) used to randomize the reporting of the data log at the specific reporting times. If specified, before each report is transmitted, the data log shall be reported at the specific report interval plus a random number chosen between 0 and the RandomTime parameter.",
                "x-talq-profiles":[
                  {
                    "lighting": {
                      "cms": "O",
                      "gw": "O"
                    }
                  }
                ],
                "type": "integer"
              }
            }
          }
        ]
      },
      "ImmediateReportingMode": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ReportingMode"
          },
          {
            "description": "In the immediate reporting mode, a logReport message shall be sent as soon as there is a change recorded in the data log. To prevent sending multiple small messages when several entries are recorded at almost the same time, a delay parameter can be specified. The delay starts as soon as the data log is modified and shall not be prolonged due to changes during the delay period. The logReport message sent after the delay shall also contain the changes recorded during the delay period.",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "M"
                }
              }
            ],
            "type": "object",
            "required": [
              "delay"
            ],
            "properties": {
              "type": {
                "type": "string",
                "default": "ImmediateReportingMode"
              },
              "delay": {
                "description": "If delay is 0, report when the log changes. For all other values, wait delay (in seconds) when the log changes before reporting.  The reported log shall include all updates that happened during the delay period.",
                "x-talq-profiles":[
                  {
                    "lighting": {
                      "cms": "M",
                      "gw": "M"
                    }
                  }
                ],
                "type": "integer"
              }
            }
          }
        ]
      },
      "LogReport": {
        "description": "This is a message sent by the Gateway to the CMS to transfer data recorded by a logger. The report contains the address of the logger and zero or some entries.",
        "type": "object",
        "properties": {
          "address": {
            "description": "The address of the LoggerConfig.",
            "type": "string"
          },
          "entries": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "cmsRefId": {
                  "type": "string"
                },
                "data": {
                  "description": "It can be AttributeLogData, EventLogData or StateChangeEventLogData.",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/LogData"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "LogData": {
        "type": "object",
        "required": [
          "type",
          "srcAddress"
        ],
        "properties": {
          "type": {
            "description": "Type of Log Data",
            "type": "string",
            "enum": [
              "AttributeLogData",
              "EventLogData",
              "StateChangeEventLogData"
            ]
          },
          "srcAddress": {
            "description": "TALQ Address of device or function within a device which is the source of the attribute or event (or to which this event applies), it can be {deviceAddress} or {deviceAddress}/{functionId}. If unknown, the srcAddress shall point at the Gateway. The address ",
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "M"
                }
              }
            ],
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Instant when the logData is created. As defined by OAS3, all options of date-time - RFC3339 shall be supported"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "AttributeLogData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LogData"
          },
          {
            "description": "Attribute log data contains a single attribute, with name and value, in each single log entry.",
            "type": "object",
            "required": [
              "attributeName",
              "attributeValue"
            ],
            "properties": {
              "type": {
                "type": "string",
                "default": "AttributeLogData"
              },
              "attributeName": {
                "type": "string"
              },
              "attributeValue": {
                "$ref": "#/components/schemas/Attribute"
              }
            }
          }
        ]
      },
      "EventLogData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LogData"
          },
          {
            "type": "object",
            "required": [
              "eventType",
              "srcAddress"
            ],
            "x-talq-profiles":[
              {
                "lighting": {
                  "cms": "M",
                  "gw": "M"
                }
              }
            ],            
            "properties": {
              "type": {
                "type": "string",
                "default": "EventLogData"
              },
              "eventType": {
                "description": "Identifier of event reported.",
                "x-talq-profiles":[
                  {
                    "lighting": {
                      "cms": "M",
                      "gw": "M"
                    }
                  }
                ],
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EventType"
                  }
                ]
              },
              "startEndFlag": {
                "description": "To report the start (true) and end (false) of a period where the condition reported yields. If not included, the event reported is not denoting a period (like 'controller rebooted')",
                "x-talq-profiles":[
                  {
                    "lighting": {
                      "cms": "M",
                      "gw": "O"
                    }
                  }
                ],
                "type": "boolean",
                "default": "false"
              },
              "info": {
                "description": "An additional description for the event. The ODN can be configured to use descriptions in one or more languages, but to configure it is outside the scope of the specification. String can refer to attributes from the set below using either {<ordinal>} or {<tag>}. The <ordinal> refers to the nth sub element of the attributes array. The <tag> is used to lookup the attribute based on the tag. When using the latter form, the description string can be made part of the event definitions.",
                "x-talq-profiles":[
                  {
                    "lighting": {
                      "cms": "O",
                      "gw": "O"
                    }
                  }
                ],
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "description": {
                      "description": "Text describing the event.",
                      "type": "string"
                    },
                    "lang": {
                      "description": "Language used.",
                      "type": "string"
                    }
                  }
                }
              },
              "attributes": {
                "description": "A sequence of attributes logged together with the event.",
                "x-talq-profiles":[
                  {
                    "lighting": {
                      "cms": "O",
                      "gw": "O"
                    }
                  }
                ],
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "value"
                  ],
                  "properties": {
                    "value": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Attribute"
                        },
                        {
                          "type": "object",
                          "description": "Value of the attribute."
                        }
                      ]
                    },
                    "srcAddress": {
                      "description": "Address of the source of the data.",
                      "type": "string"
                    },
                    "tag": {
                      "description": "Tag identifying the attribute.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "StateChangeEventLogData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LogData"
          },
          {
            "type": "object",
            "required": [
              "eventType",
              "srcAddress",
              "command"
            ],
            "properties": {
              "type": {
                "type": "string",
                "default": "StateChangeEventLogData"
              },
              "eventType": {
                "description": "Identifier of event reported.",
                "x-talq-profiles":[
                  {
                    "lighting": {
                      "cms": "M",
                      "gw": "M"
                    }
                  }
                ],
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EventType"
                  }
                ]
              },
              "command": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Command"
                  },
                  {
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "type": "object",
                    "description": "The command which triggered the change event."
                  }
                ]
              },
              "state": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/State"
                  },
                  {
                    "x-talq-profiles":[
                      {
                        "lighting": {
                          "cms": "M",
                          "gw": "M"
                        }
                      }
                    ],
                    "type": "object",
                    "description": "If the state is not equal to the command, it may be logged as well."
                  }
                ]
              }
            }
          }
        ]
      },
      "DataPackage": {
        "description": "Describes a vendor-specific package of data which may be transferred transparently from the CMS to the Gateway using the Data Package Transfer Service. Content of the package is out of scope of this specification.",
        "type": "object",
        "required": [
          "packageId",
          "releaseId",
          "ownerCMS"
        ],
        "properties": {
          "ownerCMS": {
            "description": "The address of the owner CMS",
            "type": "string"
          },
          "downloadUri": {
            "description": "The uri of binary data to download",
            "type": "string",
            "format": "uri"
          },
          "packageId": {
            "description": "The package identifier",
            "type": "string"
          },
          "releaseId": {
            "description": "The release version of package",
            "type": "string"
          }
        }
      },
      "EventType": {
        "description": "The TALQ Application Protocol defines TALQ Events that can be reported from the ODNs to the CMS in order to facilitate system management and diagnosis. Events provide information about a certain situation or condition that are useful when managing the ODNs.",
        "type": "string",
        "enum": [
          "absoluteLampPowerTooHigh",
          "absoluteLampPowerTooLow",
          "batteryEmpty",
          "batteryFull",
          "batteryLevelTooLow",
          "batteryMode",
          "batteryShutdown",
          "cabinetDoorOpen",
          "calendarChange",
          "changeReleaseFailure",
          "changingRelease",
          "charging",
          "communicationFailure",
          "contactorError",
          "containerFull",
          "controlGearComFailure",
          "controlGearCommFailure",
          "currentTooHigh",
          "currentTooLow",
          "cyclingFailure",
          "deviceMalfunction",
          "deviceReset",
          "fireDetected",
          "fluidLevelTooHigh",
          "fluidLevelTooLow",
          "functionError",
          "hardwareUpdated",
          "heavyTrafficDetected",
          "highPower",
          "highTemperature",
          "humidityTooHigh",
          "humidityTooLow",
          "impactDetected",
          "installationMode",
          "invalidAddress",
          "invalidCalendar",
          "invalidConfig",
          "invalidLampType",
          "invalidLoggerConfig",
          "invalidProgram",
          "lampFailure",
          "lampPowerTooHigh",
          "lampPowerTooLow",
          "lampUnexpectedOn",
          "lampVoltageTooHigh",
          "lampVoltageTooLow",
          "leakageDetected",
          "levelTooHigh",
          "levelTooLow",
          "lightStateChange",
          "locationUpdated",
          "locationChanged",
          "lowTemperature",
          "maintenanceMode",
          "movementDetected",
          "neutralCurrentTooHigh",
          "newCmsAttached",
          "orientationChanged",
          "overCurrentCharge",
          "overCurrentDischarge",
          "packageChangeFailure",
          "packageDownloaded",
          "phase1ActivePowerTooHigh",
          "phase1ActivePowerTooLow",
          "phase1CurrentTooHigh",
          "phase1CurrentTooLow",
          "phase1PowerFactorTooLow",
          "phase1VoltageTooHigh",
          "phase1VoltageTooLow",
          "phase2ActivePowerTooHigh",
          "phase2ActivePowerTooLow",
          "phase2CurrentTooHigh",
          "phase2CurrentTooLow",
          "phase2PowerFactorTooLow",
          "phase2VoltageTooHigh",
          "phase2VoltageTooLow",
          "phase3ActivePowerTooHigh",
          "phase3ActivePowerTooLow",
          "phase3CurrentTooHigh",
          "phase3CurrentTooLow",
          "phase3PowerFactorTooLow",
          "phase3VoltageTooHigh",
          "phase3VoltageTooLow",
          "photocellOutputOn",
          "pm10TooHigh",
          "pm1TooHigh",
          "pm2-5TooHigh",
          "powerFactorTooLow",
          "presenceStatusChanged",
          "programChange",
          "relayFailure",
          "releaseChanged",
          "releaseMismatch",
          "sensorOutputOn",
          "softwareUpdating",
          "stateChange",
          "supplyLoss",
          "supplyVoltageTooHigh",
          "supplyVoltageTooLow",
          "targetCommandChange",
          "targetLightCommandChange",
          "temperatureTooHigh",
          "temperatureTooLow",
          "totalCurrentTooHigh",
          "totalCurrentTooLow",
          "totalPowerTooHigh",
          "totalPowerTooLow"
        ]
      },
      "fGenericEvents": {
        "type": "string",
        "enum": [
          "deviceMalfunction",
          "invalidAddress",
          "invalidConfig",
          "functionError"
        ]
      },
      "fGatewayEvents": {
        "type": "string",
        "enum": [
          "newCmsAttached"
        ]
      },
      "fBasicEvents": {
        "type": "string",
        "enum": [
          "deviceReset",
          "softwareUpdating",
          "hardwareUpdated",
          "batteryMode",
          "batteryShutdown",
          "installationMode",
          "maintenanceMode",
          "cabinetDoorOpen",
          "locationUpdated"
        ]
      },
      "fBinarySensorEvents": {
        "type": "string",
        "enum": [
          "sensorOutputOn"
        ]
      },
      "fCommunicationEvents": {
        "type": "string",
        "enum": [
          "communicationFailure"
        ]
      },
      "fElectricalMeterEvents": {
        "type": "string",
        "enum": [
          "totalPowerTooHigh",
          "totalPowerTooLow",
          "powerFactorTooLow",
          "phase1PowerFactorTooLow",
          "phase2PowerFactorTooLow",
          "phase3PowerFactorTooLow",
          "supplyVoltageTooHigh",
          "supplyVoltageTooLow",
          "phase1VoltageTooHigh",
          "phase1VoltageTooLow",
          "phase2VoltageTooHigh",
          "phase2VoltageTooLow",
          "phase3VoltageTooHigh",
          "phase3VoltageTooLow",
          "totalCurrentTooHigh",
          "totalCurrentTooLow",
          "neutralCurrentTooHigh",
          "phase1CurrentTooHigh",
          "phase1CurrentTooLow",
          "phase2CurrentTooHigh",
          "phase2CurrentTooLow",
          "phase3CurrentTooHigh",
          "phase3CurrentTooLow",
          "phase1ActivePowerTooHigh",
          "phase1ActivePowerTooLow",
          "phase2ActivePowerTooHigh",
          "phase2ActivePowerTooLow",
          "phase3ActivePowerTooHigh",
          "phase3ActivePowerTooLow"
        ]
      },
      "fGenericSensorEvents": {
        "type": "string",
        "enum": [
          "levelTooHigh",
          "levelTooLow"
        ]
      },
      "fGenericActuatorEvents": {
        "type": "string",
        "enum": [
          "stateChange",
          "invalidCalendar",
          "invalidProgram",
          "programChange",
          "calendarChange",
          "targetCommandChange"
        ]
      },
      "fLampActuatorEvents": {
        "type": "string",
        "enum": [
          "lightStateChange",
          "invalidCalendar",
          "invalidLampType",
          "invalidProgram",
          "programChange",
          "calendarChange",
          "targetLightCommandChange",
          "controlGearComFailure"
        ]
      },
      "fLampMonitorEvents": {
        "type": "string",
        "enum": [
          "absoluteLampPowerTooHigh",
          "absoluteLampPowerTooLow",
          "powerFactorTooLow",
          "lampFailure",
          "invalidLampType",
          "highTemperature",
          "relayFailure",
          "lampPowerTooHigh",
          "lampPowerTooLow",
          "controlGearCommFailure",
          "cyclingFailure",
          "supplyLoss",
          "contactorError",
          "lampUnexpectedOn",
          "leakageDetected",
          "currentTooHigh",
          "currentTooLow",
          "lampVoltageTooHigh",
          "lampVoltageTooLow"
        ]
      },
      "fLightSensorEvents": {
        "type": "string",
        "enum": [
          "levelTooHigh",
          "levelTooLow"
        ]
      },
      "fPhotocellEvents": {
        "type": "string",
        "enum": [
          "photocellOutputOn"
        ]
      },
      "fTemperatureSensorEvents": {
        "type": "string",
        "enum": [
          "temperatureTooHigh",
          "temperatureTooLow",
          "fireDetected"
        ]
      },
      "fHumiditySensorEvents": {
        "type": "string",
        "enum": [
          "humidityTooLow",
          "humidityTooHigh"
        ]
      },
      "fParticulateMatterSensorEvents": {
        "type": "string",
        "enum": [
          "pm1TooHigh",
          "pm2-5TooHigh",
          "pm10TooHigh"
        ]
      },
      "fPresenceSensorEvents": {
        "type": "string",
        "enum": [
          "presenceStatusChanged"
        ]
      },
      "fMovementSensorEvents": {
        "type": "string",
        "enum": [
          "movementDetected"
        ]
      },
      "fBatteryLevelSensorEvents": {
        "type": "string",
        "enum": [
          "batteryLevelTooLow"
        ]
      },
      "fFillingLevelSensorEvents": {
        "type": "string",
        "enum": [
          "containerFull"
        ]
      },
      "fSolarBatteryChargerEvents": {
        "type": "string",
        "enum": [
          "highTemperature",
          "lowTemperature",
          "highPower",
          "charging"
        ]
      },
      "fBatteryManagementSystemEvents": {
        "type": "string",
        "enum": [
          "batteryFull",
          "batteryEmpty",
          "overCurrentCharge",
          "overCurrentDischarge",
          "highTemperature"
        ]
      },
      "fTrafficCounterEvents": {
        "type": "string",
        "enum": [
          "heavyTrafficDetected"
        ]
      },
      "fLocationSensorEvents": {
        "type": "string",
        "enum": [
          "locationChanged"
        ]
      },
      "fAccelerometerEvents": {
        "type": "string",
        "enum": [
          "impactDetected"
        ]
      },
      "fOrientationEvents": {
        "type": "string",
        "enum": [
          "orientationChanged"
        ]
      },
      "fFluidLevelSensorEvents": {
        "type": "string",
        "enum": [
          "fluidLevelTooHigh",
          "fluidLevelTooLow"
        ]
      },
      "sDataCollectEvents": {
        "type": "string",
        "enum": [
          "invalidLoggerConfig"
        ]
      },
      "sControlEvents": {
        "type": "string",
        "enum": [
          "invalidCalendar",
          "invalidProgram"
        ]
      },
      "sDataPackageEvents": {
        "type": "string",
        "enum": [
          "releaseChanged",
          "releaseMismatch",
          "changeReleaseFailure",
          "packageChangeFailure",
          "changingRelease",
          "packageDownloaded"
        ]
      },
      "ResourceReference": {
        "description": "Describes the reference to a given entity (device, group, calendar, etc.) by its resource and address parts, ex: /devices/{deviceAddress} => resource:'devices',address:'{deviceAddress}' ",
        "type": "object",
        "required": [
          "resource",
          "address"
        ],
        "properties": {
          "resource": {
            "description": "The resource identifier. This property informs the destination endpoint about the entity type, ex: groups, devices.",
            "type": "string"
          },
          "address": {
            "description": "Address of the entity, device, group, calendar, etc. When using device addresses, it can be referred to a specific function or attribute by adding its id or name, ex for device: {deviceAddress}/{functionId} or {deviceAddress}/{functionId}/{attributeName}",
            "type": "string"
          }
        }
      }
    }
  }
}